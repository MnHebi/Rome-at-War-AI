
; Straight from AiBuilder files. Now extensively modified.

(defrule
	(current-age == dark-age)
	(and
		(up-compare-sn sn-maximum-town-size c:> 0)
		(up-compare-sn sn-maximum-town-size g:< outer-townsize)
	)
	(up-timer-status town-size-timer != timer-running)
	(or
		(up-pending-placement c: town-center)
		(or
			(up-pending-placement c: farm)
			(or	
				(up-pending-placement c: house)
				(or	
					(up-pending-placement c: barracks)
					(up-pending-placement c: dock)
				)
			)
		)
	)
=>
	(up-modify-sn sn-maximum-town-size c:+ 1)
	(up-modify-sn sn-maximum-town-size g:<= outer-townsize)
	(up-modify-sn sn-maximum-town-size g:> 0)
	(up-chat-data-to-self "pending placement resize sn-maximum-town-size: %d" s: sn-maximum-town-size)
	(enable-timer town-size-timer 6)
)

(defrule
	(current-age == feudal-age)
	(and
		(up-compare-sn sn-maximum-town-size c:> 0)
		(up-compare-sn sn-maximum-town-size g:< outer-townsize)
	)
	(up-timer-status town-size-timer != timer-running)
	(or	
		(up-pending-placement c: town-center)
		(or	
			(up-pending-placement c: farm)
			(or	
				(up-pending-placement c: house)
				(or	
					(up-pending-placement c: barracks)
					(or	
						(up-pending-placement c: archery-range)
						(or	
							(up-pending-placement c: stable)
							(or	
								(up-pending-placement c: siege-workshop)
								(or	
									(up-pending-placement c: blacksmith)
									(or	
										(up-pending-placement c: market)
										(up-pending-placement c: watch-tower)
									)
								)
							)
						)
					)
				)
			)
		)
	)
=>
	(up-modify-sn sn-maximum-town-size c:+ 1)
	(up-modify-sn sn-maximum-town-size c:> 0)
	(up-modify-sn sn-maximum-town-size g:< outer-townsize)
	(up-chat-data-to-self "pending placement resize sn-maximum-town-size: %d" s: sn-maximum-town-size)
	(enable-timer town-size-timer 6)
)

(defrule
	(current-age == feudal-age)
	(and
		(up-compare-sn sn-maximum-town-size c:> 0)
		(up-compare-sn sn-maximum-town-size g:< outer-townsize)
	)
	(or
		(up-pending-placement c: dock)
		(up-pending-placement c: shipyard)
	)
=>
	(up-modify-sn sn-maximum-town-size c:+ 1)
	(up-modify-sn sn-maximum-town-size c:> 0)
	(up-modify-sn sn-maximum-town-size g:< outer-townsize)
	(up-chat-data-to-self "pending placement resize sn-maximum-town-size: %d" s: sn-maximum-town-size)
)

(defrule
	(current-age >= castle-age)
	(and
		(up-compare-sn sn-maximum-town-size c:> 0)
		(up-compare-sn sn-maximum-town-size g:< outer-townsize)
	)
	(up-timer-status town-size-timer != timer-running)
	(or	
		(up-pending-placement c: town-center)
		(or	
			(up-pending-placement c: farm)
			(or	
				(up-pending-placement c: house)
				(or	
					(up-pending-placement c: barracks)
					(or	
						(up-pending-placement c: archery-range)
						(or	
							(up-pending-placement c: stable)
							(or	
								(up-pending-placement c: siege-workshop)
								(or	
									(up-pending-placement c: blacksmith)
									(or	
										(up-pending-placement c: market)
										(or	
											(up-pending-placement c: dock)
											(up-pending-placement c: university)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
=>
	(up-modify-sn sn-maximum-town-size c:+ 1)
	(up-modify-sn sn-maximum-town-size c:> 0)
	(up-modify-sn sn-maximum-town-size g:< outer-townsize)
	(up-chat-data-to-self "pending placement resize sn-maximum-town-size: %d" s: sn-maximum-town-size)
	(enable-timer town-size-timer 6)
	(up-jump-rule 1)
)

(defrule
	(current-age >= castle-age)
	(and
		(up-compare-sn sn-maximum-town-size c:> 0)
		(up-compare-sn sn-maximum-town-size g:< outer-townsize)
	)
	(or
		(up-pending-placement c: monastery)
		(or
			(up-pending-placement c: castle)
			(or	
				(up-pending-placement c: watch-tower)
				(or	
					(up-pending-placement c: shipyard)
					(up-pending-placement c: outpost)
				)
			)
		)
	)
=>
	(up-modify-sn sn-maximum-town-size c:+ 1)
	(up-modify-sn sn-maximum-town-size c:> 0)
	(up-modify-sn sn-maximum-town-size g:< outer-townsize)
	(up-chat-data-to-self "pending placement resize sn-maximum-town-size: %d" s: sn-maximum-town-size)
)

(defrule
	(enemy-buildings-in-town)
	(up-compare-sn sn-maximum-town-size g:>= safe-townsize)
	(up-compare-sn sn-maximum-town-size g:<= outer-townsize)
=>
	(up-modify-sn sn-maximum-town-size c:- 1)
	(up-modify-sn sn-maximum-town-size g:> safe-townsize)
	(up-modify-sn sn-maximum-town-size g:< outer-townsize)
	(up-chat-data-to-self "resize due to enemy buildings in town sn-maximum-town-size: %d" s: sn-maximum-town-size)
)

(defrule
	(strategic-number sn-maximum-town-size s:> sn-camp-max-distance)
=>
	(up-modify-sn sn-camp-max-distance s:max sn-maximum-town-size)
	(up-chat-data-to-self "sn-camp-max-distance: %d" s: sn-camp-max-distance)
)

(defrule
	(goal allow-houses YES)
	(building-type-count-total town-center == 0)
=>
	(set-goal allow-houses NO)
	(chat-local-to-self "allow-houses NO")
)

(defrule
	(goal allow-houses NO)
	(building-type-count-total town-center > 0)
=>
	(set-goal allow-houses YES)
	(chat-local-to-self "allow-houses YES")
)

(defrule
	(current-age >= castle-age)
	(can-afford-building town-center)
	(building-type-count-total town-center g:< desired-number-towncenters)
	(up-can-build 0 c: town-center)
=>
	(up-build place-normal 0 c: town-center)
)

(defrule
	(goal allow-houses 1)
	(building-type-count-total house == 0)
	(up-pending-objects c: house <= 0)
	(population-headroom > 0)
	(housing-headroom < 5)
	(can-afford-building house)
	(up-can-build 0 c: house)
=>
	(up-build place-normal 0 c: house)
)

(defrule
	(goal allow-houses 1)
	(building-type-count-total house > 0)
	(up-pending-objects c: house <= 0)
	(population-headroom > 0)
	(housing-headroom < 5)
	(can-afford-building house)
	(up-can-build 0 c: house)
=>
	(up-set-placement-data my-player-number -1 c: -10)
	(up-build place-control 0 c: house)
)

(defrule
	(or	
		(and	
			(up-pending-objects c: lumber-camp <= 0)
			(up-pending-objects c: mining-camp <= 0)
		)
		(strategic-number sn-camp-max-distance g:>= map-size)
	)
=>
	(up-jump-rule 4)
)

(defrule
	(up-gaia-type-count-total c: wood >= 10)
	(up-pending-objects c: lumber-camp >= 1)
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: lumber-camp c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object 509)
	(up-set-target-point 509)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 8)
	(up-find-resource c: wood c: 3)
	(up-get-search-state local-total)
)

(defrule
	(up-gaia-type-count-total c: wood >= 10)
	(up-pending-objects c: lumber-camp >= 1)
	(up-compare-goal local-total >= 1)
	(up-compare-goal remote-total <= 2)
	(up-object-data object-data-hitpoints <= 1)
=>
	(up-target-point 0 action-delete -1 -1)
	(up-reset-placement c: lumber-camp)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(up-modify-sn sn-camp-max-distance c:+ 1)
)

(defrule
	(or	
		(up-gaia-type-count-total c: gold >= 5)
		(up-gaia-type-count-total c: stone >= 5)
	)
	(up-pending-objects c: mining-camp >= 1)
=>
	(up-full-reset-search)
	(up-filter-status c: status-pending c: list-active)
	(up-find-status-local c: mining-camp c: 1)
	(up-set-target-object search-local c: 0)
	(up-get-point position-object 509)
	(up-set-target-point 509)
	(up-reset-filters)
	(up-filter-distance c: -1 c: 4)
	(up-modify-goal 508 s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 0)
	(up-find-remote c: 66 c: 1)
	(up-find-remote c: 102 c: 1)
	(up-modify-sn sn-focus-player-number g:= 508)
	(up-get-search-state local-total)
)

(defrule
	(or	
		(up-gaia-type-count-total c: gold >= 5)
		(up-gaia-type-count-total c: stone >= 5)
	)
	(up-pending-objects c: mining-camp >= 1) 
	(up-compare-goal local-total >= 1)
	(up-compare-goal remote-total <= 0)
	(up-object-data object-data-hitpoints <= 1)
=>
	(up-target-point 0 action-delete -1 -1)
	(up-reset-placement c: mining-camp)
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(up-modify-sn sn-camp-max-distance c:+ 1)
)

(defrule
	(and
		(up-gaia-type-count-total c: wood >= 10)
		(and
			(dropsite-min-distance wood > 4)
			(building-type-count-total lumber-camp g:< desired-number-lumbercamps)
		)
	)
	(dropsite-min-distance wood g:< map-size)
	(can-afford-building lumber-camp)
	(up-pending-objects c: lumber-camp <= 0)
	(up-can-build 0 c: lumber-camp)
=>
	(up-build place-normal 0 c: lumber-camp)
)

(defrule
	(and	
		(up-gaia-type-count-total c: food >= 5)
		(and
			(building-type-count-total lumber-camp >= 1)
			(and
				(building-type-count-total farm g:< desired-number-farms)
				(building-type-count-total mill g:< desired-number-mills)
			)
		)
	)
	(can-afford-building mill)
	(up-pending-objects c: mill <= 0)
	(up-can-build 0 c: mill)
=>
	(up-build place-normal 0 c: mill)
)

(defrule
	(goal dependent-farms 1)
=>
	(up-modify-goal desired-number-farms g:= villager-count)
	(up-modify-goal desired-number-farms s:%* sn-food-gatherer-percentage)
	(up-modify-goal 510 g:= desired-number-farms)
	(up-get-fact unit-type-count villager-food 509)
	(up-modify-goal desired-number-farms g:- 509)
	(up-get-fact unit-type-count villager-farmer 509)
	(up-modify-goal desired-number-farms g:+ 509)
	(up-modify-goal desired-number-farms c:max 0)
	(up-modify-goal 510 c:+ 2);
	(up-modify-goal desired-number-farms g:min 510)
)

(defrule
	(wood-amount < 160)
	(dropsite-min-distance wood >= 5)
	(building-type-count-total lumber-camp g:< desired-number-lumbercamps)
	(strategic-number sn-wood-gatherer-percentage >= 1)
=>
	(up-jump-rule 18)
)

(defrule
(or	(up-compare-goal desired-number-farms <= 0)
(or	(building-type-count-total farm g:>= desired-number-farms)
(or	(up-pending-placement c: farm)
	(not (up-can-build 0 c: farm)))))
=>
	(up-jump-rule 17)

)

(defrule
	(true)
=>
	(set-goal temporary-goal town-center)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal5 40)
	(up-modify-goal temporary-goal5 s:min sn-maximum-town-size)
	(set-goal temporary-goal8 0)
	(up-modify-goal temporary-goal9 g:= map-size)
	(set-goal temporary-goal10 0)
)

(defrule
	(true)
=>
	(set-goal point3-x -1)
	(up-set-target-point position-self-x)
	(up-full-reset-search)
	(up-find-local g: temporary-goal c: 12)
	(up-remove-objects search-local object-data-distance g:> temporary-goal5)
	(up-clean-search search-local object-data-distance search-order-asc)
)

(defrule; end neg jump
(not	(up-set-target-object search-local g: temporary-goal4))
=>
	(up-jump-rule 12)
)

(defrule
	(up-set-target-object search-local g: temporary-goal4)
	(up-object-data object-data-type == town-center)
=>
	(set-goal temporary-goal2 2)
	(set-goal temporary-goal3 3)
	(set-goal temporary-goal6 4)
	(set-goal temporary-goal7 1)
)

(defrule
	(up-set-target-object search-local g: temporary-goal4)
	(up-object-data object-data-type == mill)
=>
	(set-goal temporary-goal2 1)
	(set-goal temporary-goal3 2)
	(set-goal temporary-goal6 4)
	(set-goal temporary-goal7 1)
)

(defrule
	(goal temporary-goal10 1)
	(goal point3-x -1)
=>
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal6 c:+ 1)
)

(defrule
	(up-set-target-object search-local g: temporary-goal4)
=>
	(up-get-point position-object point-x)
	(up-copy-point point2-x point-x)
	(up-modify-goal point2-x c:+ 40)
	(up-modify-goal point2-y c:+ 40)
	(up-modify-goal point-x g:+ temporary-goal2)
	(up-modify-goal point-y g:+ temporary-goal3)
)

(defrule
	(up-compare-goal point-x >= 0)
	(up-can-build-line 0 point-x c: farm)
	(up-point-distance point2-x point-x g:< temporary-goal9)
=>
	(up-get-point-distance point2-x point-x temporary-goal9)
	(up-copy-point point3-x point-x)
)

(defrule
	(up-compare-goal temporary-goal6 >= 2)
=>
	(up-modify-goal point-x g:- temporary-goal7)
	(up-modify-goal temporary-goal6 c:- 1)
	(up-jump-rule -2)
)

(defrule
	(up-compare-goal temporary-goal6 == 1)
	(up-set-target-object search-local g: temporary-goal4)
=>
	(up-get-point position-object point-x)
	(up-modify-goal point-x g:+ temporary-goal3)
	(up-modify-goal point-y g:+ temporary-goal3)
	(set-goal temporary-goal6 -7)
)

(defrule
	(up-compare-goal temporary-goal6 <= -2)
=>
	(up-modify-goal point-y g:- temporary-goal7)
	(up-modify-goal temporary-goal6 c:+ 1)
	(up-jump-rule -4)
)

(defrule
	(goal temporary-goal8 0)
=>
	(set-goal temporary-goal6 4)
	(up-modify-goal temporary-goal2 c:+ 1)
	(up-modify-goal temporary-goal3 c:+ 1)
	(up-modify-goal temporary-goal2 c:* -1)
	(up-modify-goal temporary-goal3 c:* -1)
	(up-modify-goal temporary-goal7 c:* -1)
	(set-goal temporary-goal8 1)
	(up-jump-rule -6)
)

(defrule
	(goal temporary-goal10 0)
	(goal point3-x -1)
=>
	(set-goal temporary-goal8 0)
	(set-goal temporary-goal10 1)
	(up-jump-rule -10)
)

(defrule
	(goal dependent-farms 1)
	(building-type-count mill >= 1)
	(up-compare-goal point3-x >= 0)
	(up-can-build-line 0 point3-x c: farm)
	(up-can-build 0 c: farm)
=>
;	(chat-to-player my-player-number "Manual farm.")
	(up-build-line point3-x point3-x c: farm)
	(up-jump-rule 3)
)

(defrule
	(up-set-target-object search-local g: temporary-goal4)
=>
	(up-modify-goal temporary-goal4 c:+ 1)
	(set-goal temporary-goal8 0)
	(set-goal temporary-goal10 0)
	(up-jump-rule -13)
)

(defrule
	(not	
		(up-set-target-object search-local g: temporary-goal4)
	)
	(goal temporary-goal town-center)
	(building-type-count mill >= 1)
=>
	(set-goal temporary-goal mill)
	(up-full-reset-search)
	(up-find-local g: temporary-goal c: 20)
	(set-goal temporary-goal4 0)
	(set-goal temporary-goal8 0)
	(set-goal temporary-goal10 0)
	(up-jump-rule -14)
)

;jumps end

(defrule
	(wood-amount > 150)
	(goal dependent-farms 1)
	(building-type-count mill >= 1)
	(up-can-build 0 c: farm)
=>
;	(chat-to-player my-player-number "Normal farm.")
	(up-build place-normal 0 c: farm)
)

(defrule
	(can-afford-building town-center)
	(building-type-count-total town-center == 0)
	(up-can-build 0 c: town-center)
=>
	(up-build place-normal 0 c: town-center)
)

(defrule
	(up-object-type-count-total c: town-center > 0)
	(up-object-type-count-total c: lumber-camp > 0)
	(up-object-type-count-total c: mill == 0)
	(up-pending-objects c: mill <= 0)
	(up-can-build gl-escrow c: mill)
=>
	(set-goal gl-escrow with-escrow)
	(up-build place-normal gl-escrow c: mill)
)

(defrule
	(up-object-type-count-total c: town-center > 0)
	(up-object-type-count-total c: lumber-camp == 0)
	(up-pending-objects c: lumber-camp <= 0)
	(can-build-with-escrow lumber-camp)
=>
	(release-escrow wood)
	(build lumber-camp)
)

(defrule
	(current-age >= feudal-age)
	(building-type-count-total town-center > 0)
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mining-camp == 0)
	(can-afford-building mining-camp)
	(up-can-build 0 c: mining-camp)
=>
	(up-build place-normal 0 c: mining-camp)
)

(defrule
	(current-age >= feudal-age)
	(building-type-count-total mining-camp g:< desired-number-miningcamps)
	(building-type-count-total lumber-camp >= 1)
	(up-pending-objects c: mining-camp <= 0)
	(strategic-number sn-gold-gatherer-percentage >= 1)
	(up-gaia-type-count-total c: gold >= 5)
	(dropsite-min-distance gold > 5)
	(dropsite-min-distance gold g:< map-size)
	(can-afford-building mining-camp)
	(up-can-build 0 c: mining-camp)
=>
	(up-build place-normal 0 c: mining-camp))

(defrule
	(current-age >= feudal-age)
	(building-type-count-total mining-camp g:< desired-number-miningcamps)
	(building-type-count-total lumber-camp >= 1)
	(up-pending-objects c: mining-camp <= 0)
	(strategic-number sn-stone-gatherer-percentage >= 1)
	(up-gaia-type-count-total c: stone >= 5)
	(dropsite-min-distance stone > 5)
	(dropsite-min-distance stone g:< map-size)
	(can-afford-building mining-camp)
	(up-can-build 0 c: mining-camp)
=>
	(up-build place-normal 0 c: mining-camp))

(defrule
	(can-afford-building barracks)
	(building-type-count-total barracks g:< desired-number-barracks)
	(building-type-count-total lumber-camp >= 1)
	(up-can-build 0 c: barracks)
=>
	(up-build place-normal 0 c: barracks))

(defrule
	(current-age >= feudal-age)
	(can-afford-building archery-range)
	(building-type-count-total barracks > 0)
	(building-type-count-total archery-range g:< desired-number-ranges)
	(up-can-build 0 c: archery-range)
=>
	(up-build place-normal 0 c: archery-range))

(defrule
	(current-age >= feudal-age)
	(can-afford-building stable)
	(building-type-count-total barracks > 0)
	(building-type-count-total stable g:< desired-number-stables)
	(up-can-build 0 c: stable)
=>
	(up-build place-normal 0 c: stable))

(defrule
	(current-age >= castle-age)
	(can-afford-building siege-workshop)
	(building-type-count-total siege-workshop g:< desired-number-workshops)
	(up-can-build 0 c: siege-workshop)
=>
	(up-build place-normal 0 c: siege-workshop))

(defrule
	(current-age >= feudal-age)
	(can-afford-building blacksmith)
	(building-type-count-total blacksmith g:< desired-number-blacksmiths)
	(up-can-build 0 c: blacksmith)
=>
	(up-build place-normal 0 c: blacksmith)
)

(defrule
	(current-age == feudal-age)
	(can-afford-building market)
	(building-type-count-total market == 0)
	(up-can-build 0 c: market)
=>
	(up-set-placement-data my-player-number -1 c: -20)
	(up-build place-control 0 c: market)
)

(defrule
	(current-age == castle-age)
	(can-afford-building market)
	(building-type-count-total market == 0)
	(up-can-build 0 c: market)
=>
	(up-set-placement-data my-player-number -1 c: -20)
	(up-build place-control 0 c: market)
)

(defrule
	(current-age == imperial-age)
	(can-afford-building market)
	(building-type-count-total market g:< desired-number-markets)
	(up-can-build 0 c: market)
=>
	(up-get-fact building-type-count market gl-number-markets)
	
	(up-modify-goal gl-market-placement c:neg 10)
	(up-modify-goal gl-market-placement g:* gl-number-markets)
	(up-modify-goal gl-market-placement c:+ 10)
	(up-modify-goal gl-market-placement s:min sn-maximum-town-size)
	
	(up-set-placement-data my-player-number -1 g: gl-market-placement)
	(up-build place-control 0 c: market)
)

(defrule
	(can-afford-building dock)
	(building-type-count-total dock g:< desired-number-docks)
	(building-type-count-total lumber-camp >= 1)
	(up-can-build 0 c: dock)
=>
	(up-build place-normal 0 c: dock)
)

(defrule
	(current-age >= castle-age)
	(can-afford-building university)
	(building-type-count-total university g:< desired-number-universities)
	(up-can-build 0 c: university)
=>
	(up-build place-normal 0 c: university))

(defrule
	(current-age >= castle-age)
	(can-afford-building monastery)
	(building-type-count-total monastery g:< desired-number-monasteries)
	(up-can-build 0 c: monastery)
=>
	(up-build place-normal 0 c: monastery))

(defrule
	(current-age >= castle-age)
	(can-afford-building castle)
	(building-type-count-total castle g:< desired-number-castles)
	(up-can-build 0 c: castle)
=>
;	(up-get-fact building-type-count castle gl-number-castles)	
;	(up-modify-goal gl-castle-placement c:= 10)
;	(up-modify-goal gl-castle-placement g:* gl-number-castles)
;	(up-modify-goal gl-castle-placement c:+ 10)
;	(up-modify-goal gl-castle-placement s:min sn-maximum-town-size)
	(up-set-placement-data my-player-number -1 c: 20)	
;	(up-set-placement-data my-player-number -1 g: gl-castle-placement)
	(up-build place-control 0 c: castle)
)

(defrule
	(current-age >= castle-age)
	(can-afford-building outpost)
	(building-type-count-total outpost g:< desired-number-outposts)
	(up-can-build 0 c: outpost)
=>
	(up-build place-normal 0 c: outpost))

(defrule
	(current-age >= feudal-age)
	(can-afford-building watch-tower)
	(building-type-count-total watch-tower g:< desired-number-watchtowers)
	(up-can-build 0 c: watch-tower)
	(up-pending-objects c: watch-tower < 1)
=>
	(up-get-fact building-type-count watch-tower gl-number-watchtowers)
	
	(up-modify-goal gl-watchtower-placement c:= 4)
	(up-modify-goal gl-watchtower-placement g:* gl-number-watchtowers)
	(up-modify-goal gl-watchtower-placement c:+ 4)
	(up-modify-goal gl-watchtower-placement s:min sn-maximum-town-size)
	
	(up-set-placement-data my-player-number -1 g: gl-watchtower-placement)
	(up-build place-control 0 c: watch-tower)
)

;does not function
;cause unknown
(defrule
	(and
		(current-age >= feudal-age)
		(goal flank-position 1)
	)
=>
	(enable-wall-placement 2)
	(set-strategic-number sn-gate-type-for-wall 1)
	(chat-local-to-self "Enable walls for flank position")
	(disable-self)
)

(defrule
	(and
		(current-age >= feudal-age)
		(goal flank-position 1)
	)
	(wall-completed-percentage 2 < 100)
	(can-build-wall-with-escrow 2 palisade-wall)
=>
	(release-escrow wood)
	(build-wall 2 palisade-wall)
	(chat-local-to-self "Place walls")
)

(defrule
	(and
		(current-age >= feudal-age)
		(goal flank-position 1)
	)
	(building-type-count-total gate < 4)
	(can-build-gate-with-escrow 2)
=>
	(release-escrow wood)
	(build-gate 2)
	(chat-local-to-self "Place gates")
)

(defrule
	(goal taunt-wall YES)
	(current-age >= feudal-age)
	(wall-completed-percentage 2 < 100)
	(can-build-wall-with-escrow 2 stone-wall-line)
=>
	(release-escrow stone)
	(build-wall 2 stone-wall-line)
	(chat-local-to-self "Place walls")
)

(defrule
	(goal taunt-wall YES)
	(current-age >= feudal-age)
	(building-type-count-total gate < 4)
	(can-build-gate-with-escrow 2)
=>
	(release-escrow stone)
	(build-gate 2)
	(chat-local-to-self "Place gates")
)


