
(defrule
	(true)
=>
	(enable-timer land-attack-timer 600)
	(enable-timer naval-attack-timer 600)
	
	(disable-self)
)

(defrule
	(up-timer-status attack-type-timer != timer-running)
=>
	(enable-timer attack-type-timer 30)
)

(defrule
	(up-timer-status retreat-timer != timer-running)
=>
	(enable-timer retreat-timer 300)
)

;rule jumps, do not add rules here
;dictate which method to attack with, TSA or Group handler
(defrule
	(up-timer-status attack-type-timer <= timer-triggered)
	(soldier-count g:< gl-twenty-percent)
=>
	(set-goal attack-type-land TOWN-SIZE)
	(up-jump-rule 1)
)

(defrule
	(soldier-count g:>= gl-twenty-percent)
=>
	(set-goal attack-type-land GROUP)
	(up-jump-rule 1)
)

(defrule
	(warboat-count g:< gl-twenty-percent)
=>
	(set-goal attack-type-sea TOWN-SIZE)
	(up-jump-rule 1)
)

(defrule
	(warboat-count g:>= gl-twenty-percent)
=>
	(set-goal attack-type-sea GROUP)
)
;rule jumps end

;retreat when forces are too dwindled
(defrule
	(up-timer-status retreat-timer <= timer-triggered)
	(current-age >= feudal-age)
	(goal attack-type-land TOWN-SIZE)
	(soldier-count g:< gl-five-percent)
=>
	(up-reset-attack-now)
	(up-reset-unit c: -1)
	(up-retreat-now)
)

(defrule
	(up-timer-status retreat-timer <= timer-triggered)
	(current-age >= feudal-age)
	(goal attack-type-land GROUP)
	(soldier-count g:< gl-twenty-percent)
=>
	(up-reset-attack-now)
	(up-reset-unit c: -1)
	(up-retreat-now)
)

(defrule
	(up-compare-goal current-phase g:!= previous-phase)
	(goal current-phase 1)
=>
	(set-goal military-spread-time 1)
	(set-goal military-spread-interval 100)
	(set-goal preferred-target-player -1)
	(set-goal allow-wall-targeting 1)
	(set-goal smart-wall-targeting 1)
	(set-goal land-attack-delay 300)
	(set-goal land-attack-interval 120)
	(set-goal land-attack-requirement 6)
	(set-goal naval-attack-delay 300)
	(set-goal naval-attack-interval 120)
	(set-goal naval-attack-requirement 6)
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase g:!= previous-phase)
	(goal current-phase 2)
=>
	(set-goal military-spread-time 1)
	(set-goal military-spread-interval 100)
	(set-goal preferred-target-player -1)
	(set-goal allow-wall-targeting 1)
	(set-goal smart-wall-targeting 1)
	(set-goal land-attack-delay 300)
	(set-goal land-attack-interval 120)
	(set-goal land-attack-requirement 6)
	(set-goal naval-attack-delay 300)
	(set-goal naval-attack-interval 120)
	(set-goal naval-attack-requirement 6)
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase g:!= previous-phase)
	(goal current-phase 3)
=>
	(set-goal military-spread-time 1)
	(set-goal military-spread-interval 100)
	(set-goal preferred-target-player -1)
	(set-goal allow-wall-targeting 1)
	(set-goal smart-wall-targeting 1)
	(set-goal land-attack-delay 300)
	(set-goal land-attack-interval 120)
	(set-goal land-attack-requirement 6)
	(set-goal naval-attack-delay 300)
	(set-goal naval-attack-interval 120)
	(set-goal naval-attack-requirement 6)
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase g:!= previous-phase)
	(goal current-phase 4)
=>
	(set-goal military-spread-time 1)
	(set-goal military-spread-interval 100)
	(set-goal preferred-target-player -1)
	(set-goal allow-wall-targeting 1)
	(set-goal smart-wall-targeting 1)
	(set-goal land-attack-delay 300)
	(set-goal land-attack-interval 120)
	(set-goal land-attack-requirement 10)
	(set-goal naval-attack-delay 300)
	(set-goal naval-attack-interval 120)
	(set-goal naval-attack-requirement 6)
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase g:!= previous-phase)
	(goal current-phase 5)
=>
	(set-goal military-spread-time 1)
	(set-goal military-spread-interval 100)
	(set-goal preferred-target-player -1)
	(set-goal allow-wall-targeting 1)
	(set-goal smart-wall-targeting 1)
	(set-goal land-attack-delay 300)
	(set-goal land-attack-interval 120)
	(set-goal land-attack-requirement 10)
	(set-goal naval-attack-delay 300)
	(set-goal naval-attack-interval 120)
	(set-goal naval-attack-requirement 6)
	
	(disable-self)
)

;military superiority system, atm very rudimentary just to get it to stop attacking ALL THE TIME.
;0 means inferior, 1 is good enough to defend, 2 is equal, 3 is superior.

(defrule
	(up-timer-status mil-pop-check-timer == timer-disabled)
=>
	(enable-timer mil-pop-check-timer 60)
	(chat-local-to-self "start military population check timer")
)

(defrule
	(up-timer-status mil-pop-check-timer == timer-triggered)
=>
	(disable-timer mil-pop-check-timer)
	(set-goal check-mil-pop YES)
	(set-goal milcheck-concluded BEGAN)
	(up-modify-goal gl-team-combined-mil-pop c:= 0)
	(up-modify-goal gl-team-combined-navy c:= 0)
	(chat-local-to-self "start checking military populations")
)

(defrule
	(and
		(goal check-mil-pop YES)
		(goal milcheck-concluded BEGAN)
	)
=>
	(up-get-fact soldier-count 0 gl-own-military-population)
	(up-get-fact warboat-count 0 gl-own-navy)
	(up-get-fact-sum any-ally soldier-count 0 gl-team-military-population)
	(up-get-fact-sum any-ally warboat-count 0 gl-team-navy)
	(up-modify-goal gl-team-combined-mil-pop g:+ gl-own-military-population)
	(up-modify-goal gl-team-combined-navy g:+ gl-own-navy)
	(up-modify-goal gl-team-combined-mil-pop g:+ gl-team-military-population)
	(up-modify-goal gl-team-combined-navy g:+ gl-team-navy)
	(set-goal milcheck-concluded OWN)
	(chat-local-to-self "military population check, own team done")
)

(defrule
	(and
		(goal check-mil-pop YES)
		(goal milcheck-concluded OWN)
	)
=>
	(up-get-fact-sum any-enemy soldier-count 0 gl-enemy-team-military-population)
	(up-get-fact-sum any-enemy warboat-count 0 gl-enemy-team-navy)
	(up-get-fact-sum any-enemy soldier-count 0 gl-enemy-team-mil-pop-divided)
	(up-get-fact-sum any-enemy warboat-count 0 gl-enemy-team-navy-divided)
	(set-goal milcheck-concluded ENEMY)
	(chat-local-to-self "military population check, enemy team done")
)

(defrule
	(and
		(goal check-mil-pop YES)
		(goal milcheck-concluded ENEMY)
	)
=>
	(up-modify-goal gl-enemy-team-mil-pop-divided c:z/ 2)
	(up-modify-goal gl-enemy-team-navy-divided c:z/ 2)
	(set-goal milcheck-concluded COMPARISONS)
	(chat-local-to-self "military population check, comparisons done")
)

;land check

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-own-military-population g:< gl-enemy-team-military-population)
=>
	(set-goal military-superiority INFERIOR)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 10)
	(chat-local-to-self "military-superiority INFERIOR")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-team-combined-mil-pop g:< gl-enemy-team-military-population)
=>
	(set-goal military-superiority INFERIOR)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 10)
	(chat-local-to-self "military-superiority INFERIOR")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-own-military-population g:== gl-enemy-team-mil-pop-divided)
=>
	(set-goal military-superiority TOLERABLE)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 30)
	(chat-local-to-self "military-superiority TOLERABLE")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-team-combined-mil-pop g:== gl-enemy-team-mil-pop-divided)
=>
	(set-goal military-superiority TOLERABLE)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 30)
	(chat-local-to-self "military-superiority TOLERABLE")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-own-military-population g:== gl-enemy-team-military-population)
=>
	(set-goal military-superiority EQUAL)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 50)
	(chat-local-to-self "military-superiority EQUAL")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-team-combined-mil-pop g:== gl-enemy-team-military-population)
=>
	(set-goal military-superiority EQUAL)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 50)
	(chat-local-to-self "military-superiority EQUAL")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-own-military-population g:> gl-enemy-team-military-population)
=>
	(set-goal military-superiority SUPERIOR)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 80)
	(chat-local-to-self "military-superiority SUPERIOR")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-team-combined-mil-pop g:> gl-enemy-team-military-population)
=>
	(set-goal military-superiority SUPERIOR)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 80)
	(chat-local-to-self "military-superiority SUPERIOR")
)

;navy check

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-own-navy g:< gl-enemy-team-navy)
=>
	(set-goal naval-superiority INFERIOR)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 10)
	(chat-local-to-self "naval-superiority INFERIOR")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-team-combined-navy g:< gl-enemy-team-navy)
=>
	(set-goal naval-superiority INFERIOR)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 10)
	(chat-local-to-self "naval-superiority INFERIOR")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-own-navy g:== gl-enemy-team-navy-divided)
=>
	(set-goal naval-superiority TOLERABLE)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 30)
	(chat-local-to-self "naval-superiority TOLERABLE")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-team-combined-navy g:== gl-enemy-team-navy-divided)
=>
	(set-goal naval-superiority TOLERABLE)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 30)
	(chat-local-to-self "naval-superiority TOLERABLE")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-own-navy g:== gl-enemy-team-navy)
=>
	(set-goal naval-superiority EQUAL)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 50)
	(chat-local-to-self "naval-superiority EQUAL")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-team-combined-navy g:== gl-enemy-team-navy)
=>
	(set-goal naval-superiority EQUAL)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 50)
	(chat-local-to-self "naval-superiority EQUAL")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-own-navy g:> gl-enemy-team-navy)
=>
	(set-goal naval-superiority SUPERIOR)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 80)
	(chat-local-to-self "naval-superiority SUPERIOR")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-team-combined-navy g:> gl-enemy-team-navy)
=>
	(set-goal naval-superiority SUPERIOR)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 80)
	(chat-local-to-self "naval-superiority SUPERIOR")
)

;reset

(defrule
	(goal milcheck-concluded CONCLUDED-NAVY)
=>
	(set-goal milcheck-concluded RESET)
)


;counter unit system begin

;counter infantry, not finished, need to map all the infantry units in the mod
(defrule
	(or
		(players-unit-type-count any-enemy militiaman-line >= 1)
		(or
			(players-unit-type-count any-enemy spearman-line >= 1)
			(or
				(players-unit-type-count any-enemy caetratus-line >= 1)
				(or
					(players-unit-type-count any-enemy hippeus-line >= 1)
					(or
						(players-unit-type-count any-enemy praetorian-guard-line >= 1)
						(or
							(players-unit-type-count any-enemy woad-raider-line >= 1)
							(or
								(players-unit-type-count any-enemy immortal-line >= 1)
								(or
									(players-unit-type-count any-enemy legionary-ranged-line >= 1)
									(or
										(players-unit-type-count any-enemy legionary-melee-line >= 1)
										(players-unit-type-count any-enemy imitation-legionary-line >= 1)
									)
								)
							)
						)
					)
				)
			)
		)
	)
=>
	(set-goal train-anti-infantry 1)
)

(defrule
	(and
		(players-unit-type-count every-enemy militiaman-line == 0)
		(and
			(players-unit-type-count every-enemy spearman-line == 0)
			(and
				(players-unit-type-count every-enemy caetratus-line == 0)
				(and
					(players-unit-type-count every-enemy hippeus-line == 0)
					(and
						(players-unit-type-count every-enemy praetorian-guard-line == 0)
						(and
							(players-unit-type-count every-enemy woad-raider-line == 0)
							(and
								(players-unit-type-count every-enemy immortal-line == 0)
								(and
									(players-unit-type-count every-enemy legionary-ranged-line == 0)
									(and
										(players-unit-type-count every-enemy legionary-melee-line == 0)
										(players-unit-type-count every-enemy imitation-legionary-line == 0)
									)
								)
							)
						)
					)
				)
			)
		)
	)
=>
	(set-goal train-anti-infantry 0)
)

;counter archers, not finished, need to map all the archer units in the mod
(defrule
	(or
		(players-unit-type-count any-enemy chakram-thrower-line >= 1)
		(or
			(players-unit-type-count any-enemy peltast-line >= 1)
			(or
				(players-unit-type-count any-enemy balearic-slinger-line >= 1)
				(or
					(players-unit-type-count any-enemy bowman-line >= 1)
					(players-unit-type-count any-enemy crossbowman >= 1)
				)
			)
		)
	)
=>
	(set-goal train-anti-archer 1)
)

(defrule
	(and
		(players-unit-type-count every-enemy chakram-thrower-line == 0)
		(and
			(players-unit-type-count every-enemy peltast-line == 0)
			(and
				(players-unit-type-count every-enemy balearic-slinger-line == 0)
				(and
					(players-unit-type-count every-enemy bowman-line == 0)
					(players-unit-type-count every-enemy crossbowman == 0)
				)
			)
		)
	)
=>
	(set-goal train-anti-archer 0)
)

;counter cavalry archers, not finished, need to map all the cavalry archer units in the mod
(defrule
	(or
		(players-unit-type-count any-enemy amazon-line >= 1)
		(or
			(players-unit-type-count any-enemy elephant-archer-line >= 1)
			(or
				(players-unit-type-count any-enemy cavalry-archer-line >= 1)
				(players-unit-type-count any-enemy camel-archer-line >= 1)
			)
		)
	)
=>
	(set-goal train-anti-cavalryarcher 1)
)

(defrule
	(and
		(players-unit-type-count every-enemy amazon-line == 0)
		(and
			(players-unit-type-count every-enemy elephant-archer-line == 0)
			(and
				(players-unit-type-count every-enemy cavalry-archer-line == 0)
				(players-unit-type-count every-enemy camel-archer-line == 0)
			)
		)
	)
=>
	(set-goal train-anti-cavalryarcher 0)
)

;counter cavalry, not finished, need to map all the cavalry units in the mod
(defrule
	(or
		(players-unit-type-count any-enemy scout-cavalry-line >= 1)
		(or
			(players-unit-type-count any-enemy cavalry-line >= 1)
			(or
				(players-unit-type-count any-enemy chariot-line >= 1)
				(or
					(players-unit-type-count any-enemy ratha-melee-line >= 1)
					(or
						(players-unit-type-count any-enemy agema-line >= 1)
						(or
							(players-unit-type-count any-enemy kurgan-bound-chief-line >= 1)
							(or
								(players-unit-type-count any-enemy praetorian-prefect-line >= 1)
								(or
									(players-unit-type-count any-enemy cataphract-line >= 1)
									(or
										(players-unit-type-count any-enemy grivpanvar-line >= 1)
										(or
											(players-unit-type-count any-enemy camel-line >= 1)
											(or
												(players-unit-type-count any-enemy war-elephant-line >= 1)
												(players-unit-type-count any-enemy battle-elephant-line >= 1)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
=>
	(set-goal train-anti-cavalry 1)
)

(defrule
	(and
		(players-unit-type-count every-enemy scout-cavalry-line == 0)
		(and
			(players-unit-type-count every-enemy cavalry-line == 0)
			(and
				(players-unit-type-count every-enemy chariot-line == 0)
				(and
					(players-unit-type-count every-enemy ratha-melee-line == 0)
					(and
						(players-unit-type-count every-enemy agema-line == 0)
						(and
							(players-unit-type-count every-enemy kurgan-bound-chief-line == 0)
							(and
								(players-unit-type-count every-enemy praetorian-prefect-line == 0)
								(and
									(players-unit-type-count every-enemy cataphract-line == 0)
									(and
										(players-unit-type-count every-enemy grivpanvar-line == 0)
										(and
											(players-unit-type-count every-enemy camel-line == 0)
											(and
												(players-unit-type-count every-enemy war-elephant-line == 0)
												(players-unit-type-count every-enemy battle-elephant-line == 0)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
=>
	(set-goal train-anti-cavalry 0)
)

;counter siege, including Ballista Elephants & Armored Elephants
(defrule
	(or
		(players-unit-type-count any-enemy ballista-elephant >= 1)
		(or
			(players-unit-type-count any-enemy elite-ballista-elephant >= 1)
			(or
				(players-unit-type-count any-enemy battering-ram-line >= 1)
				(or
					(players-unit-type-count any-enemy armored-elephant-line >= 1)
					(or
						(players-unit-type-count any-enemy mangonel-line >= 1)
						(or
							(players-unit-type-count any-enemy scorpion-line >= 1)
							(or
								(players-unit-type-count any-enemy oxybeles-line >= 1)
								(or
									(players-building-type-count any-enemy palintonon >= 1)
									(players-unit-type-count any-enemy palintonon-packed >= 1)
								)
							)
						)
					)
				)
			)
		)
	)
=>
	(set-goal train-anti-siege 1)
)

(defrule
	(and
		(players-unit-type-count every-enemy ballista-elephant == 0)
		(and
			(players-unit-type-count every-enemy elite-ballista-elephant == 0)
			(and
				(players-unit-type-count every-enemy battering-ram-line == 0)
				(and
					(players-unit-type-count every-enemy armored-elephant-line == 0)
					(and
						(players-unit-type-count every-enemy mangonel-line == 0)
						(and
							(players-unit-type-count every-enemy scorpion-line == 0)
							(and
								(players-unit-type-count every-enemy oxybeles-line == 0)
								(and
									(players-building-type-count every-enemy palintonon == 0)
									(players-unit-type-count every-enemy palintonon-packed == 0)
								)
							)
						)
					)
				)
			)
		)
	)
=>
	(set-goal train-anti-siege 0)
)

;counter priests/brahmin
(defrule
	(or
		(players-unit-type-count any-enemy priest >= 1)
		(players-unit-type-count any-enemy brahmin >= 1)
	)
=>
	(set-goal train-anti-priest 1)
)

(defrule
	(and
		(players-unit-type-count every-enemy priest == 0)
		(players-unit-type-count every-enemy brahmin == 0)
	)
=>
	(set-goal train-anti-priest 0)
)

;counter boarding ships
(defrule
	(players-unit-type-count any-enemy boarding-ship >= 1)
=>
	(set-goal train-scoutships 1)
)

(defrule
	(players-unit-type-count every-enemy boarding-ship == 0)
=>
	(set-goal train-scoutships 0)
)

;counter scout ships/fire ships
(defrule
	(or
		(players-unit-type-count any-enemy fire-ship-line >= 1)
		(players-unit-type-count any-enemy scout-galley-line >= 1)
	)
=>
	(set-goal train-hemiolia 1)
)

(defrule
	(and
		(players-unit-type-count every-enemy fire-ship-line == 0)
		(players-unit-type-count every-enemy scout-galley-line == 0)
	)
=>
	(set-goal train-hemiolia 0)
)

;counter monoremes/scout ships
(defrule
	(or
		(players-unit-type-count any-enemy monoreme-line >= 1)
		(players-unit-type-count any-enemy scout-galley-line >= 1)
	)
=>
	(set-goal train-fireships 1)
)

(defrule
	(and
		(players-unit-type-count every-enemy monoreme-line == 0)
		(players-unit-type-count every-enemy scout-galley-line == 0)
	)
=>
	(set-goal train-fireships 0)
)

;counter hemiolia

(defrule
	(players-unit-type-count any-enemy hemiolia-line >= 1)
=>
	(set-goal train-remes 1)
)

(defrule
	(players-unit-type-count every-enemy hemiolia-line == 0)
=>
	(set-goal train-remes 0)
)

;counter advanced warships with boarding ships

(defrule
	(or
		(players-unit-type-count any-enemy juggernaut-line >= 1)
		(or
			(players-unit-type-count any-enemy quadrireme-line >= 1)
			(or
				(players-unit-type-count any-enemy liburna-line >= 1)
				(players-unit-type-count any-enemy octeres >= 1)
			)
		)
	)
=>
	(set-goal train-boardingships 1)
)

(defrule
	(and
		(players-unit-type-count every-enemy juggernaut-line == 0)
		(and
			(players-unit-type-count every-enemy quadrireme-line == 0)
			(and
				(players-unit-type-count every-enemy liburna-line == 0)
				(players-unit-type-count every-enemy octeres == 0)
			)
		)
	)
=>
	(set-goal train-boardingships 0)
)

;counter advanced warships
(defrule
	(or
		(players-unit-type-count any-enemy juggernaut-line >= 1)
		(or
			(players-unit-type-count any-enemy quadrireme-line >= 1)
			(or
				(players-unit-type-count any-enemy liburna-line >= 1)
				(players-unit-type-count any-enemy octeres >= 1)
			)
		)
	)
=>
	(set-goal train-advanced-warship-counter 1)
)

(defrule
	(and
		(players-unit-type-count every-enemy juggernaut-line == 0)
		(and
			(players-unit-type-count every-enemy quadrireme-line == 0)
			(and
				(players-unit-type-count every-enemy liburna-line == 0)
				(players-unit-type-count every-enemy octeres == 0)
			)
		)
	)
=>
	(set-goal train-advanced-warship-counter 0)
)
;counter unit system end

#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined DIFFICULTY-EXTREME

(defrule
	(true)
=>
	(set-goal scale-attack-timer 200)
	
	(disable-self)
)

#end-if
#end-if
#end-if
#end-if

#load-if-defined DIFFICULTY-MODERATE

(defrule
	(true)
=>
	(set-goal scale-attack-timer 100)
	
	(disable-self)
)

#end-if

#load-if-defined DIFFICULTY-HARD

(defrule
	(true)
=>
	(set-goal scale-attack-timer 50)
	
	(disable-self)
)

#end-if

#load-if-defined DIFFICULTY-HARDEST

(defrule
	(true)
=>
	(set-goal scale-attack-timer 25)
	
	(disable-self)
)

#end-if

#load-if-defined DIFFICULTY-EXTREME

(defrule
	(true)
=>
	(set-goal scale-attack-timer 12)
	
	(disable-self)
)

#end-if

;start of rule jumping, do not add rules before rule jumping ends

;rule 1
(defrule
	(up-compare-goal military-spread-time <= 0)
=>
	(up-jump-rule 3))
(defrule
	(goal spread-units 0)
	(up-timer-status unit-spread-timer != timer-running)
=>
	(up-set-timer c: unit-spread-timer g: military-spread-interval)
	(up-jump-rule 2)
	(disable-self)
)

;rule 2
(defrule
	(goal spread-units 1)
	(timer-triggered unit-spread-timer)
=>
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-goal spread-units 0); sn-task-ungrouped-soldiers always 1 as a fact
	(up-set-timer c: unit-spread-timer g: military-spread-interval)
)

;rule 3
(defrule
	(goal spread-units 0)
	(up-timer-status unit-spread-timer != timer-running)
=>
	(set-strategic-number sn-task-ungrouped-soldiers 1)
	(set-goal spread-units 1)
	(up-set-timer c: unit-spread-timer g: military-spread-time)
)

;rule 4
(defrule
	(up-compare-goal military-superiority >= 2)
	(players-building-count any-enemy >= 1)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
)

;rule 5
(defrule
	(up-compare-goal military-superiority >= 2)
	(or	
		(up-compare-goal preferred-target-player <= 0)
		(up-compare-goal preferred-target-player >= 9)
	)
=>
	(up-jump-rule 3)
)

;rule 6
(defrule
	(up-compare-goal military-superiority >= 2)
=>
	(up-modify-goal temporary-goal s:= sn-target-player-number)
	(up-modify-sn sn-target-player-number g:= preferred-target-player)
)

;rule 7
(defrule
	(up-compare-goal military-superiority >= 2)
	(players-building-count target-player >= 1)
	(player-in-game target-player)
(not	
	(stance-toward target-player ally)
)
=>
	(up-jump-rule 1)
)

;rule 8
(defrule
	(up-compare-goal military-superiority >= 2)
=>
	(up-modify-sn sn-target-player-number g:= temporary-goal)
)

;rule 9
(defrule
	(up-compare-goal military-superiority >= 2)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
)

;rule 10
(defrule
(or	
	(goal allow-wall-targeting 0)
	(goal allow-wall-targeting 1)
)
=>
	(up-modify-sn sn-wall-targeting-mode g:= allow-wall-targeting)
)

;rule 11
(defrule
	(up-compare-goal attack-type-land c:= 0)
	(up-compare-goal land-attack-delay >= 0)
	(up-compare-goal gl-game-time g:>= land-attack-delay)
	(defend-soldier-count g:>= land-attack-requirement)
	(up-timer-status land-attack-timer != timer-running)
=>
	(chat-local-to-self "land attack")
	(up-modify-sn sn-percent-attack-soldiers g:= land-attack-percentage)
	(up-modify-sn sn-maximum-town-size c:= 250)
	(attack-now)
	(up-modify-sn sn-maximum-town-size g:= outer-townsize)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(up-set-timer c: land-attack-timer g: land-attack-interval)
	(up-jump-rule 1)
)

;rule 12
(defrule
	(up-compare-goal attack-type-sea c:= 0)
	(up-compare-goal naval-attack-delay >= 0)
	(up-compare-goal gl-game-time g:>= naval-attack-delay)
	(defend-warboat-count g:>= naval-attack-requirement)
	(up-timer-status naval-attack-timer != timer-running)
=>
	(chat-local-to-self "naval attack")
	(up-modify-sn sn-percent-attack-boats g:= naval-attack-percentage)
	(up-modify-sn sn-maximum-town-size c:= 250)
	(attack-now)
	(up-modify-sn sn-maximum-town-size g:= outer-townsize)
	(set-strategic-number sn-percent-attack-boats 0)
	(up-set-timer c: naval-attack-timer g: naval-attack-interval)
)
;end of rule jumps

;periodic attacks, if not flank player
(defrule
	(game-time > 300)
	(goal flank-position 0)
	(up-timer-status periodic-attack-timer != timer-running)
=>
	(chat-local-to-self "periodic attack")
	(up-modify-sn sn-percent-attack-soldiers g:= land-attack-percentage)
	(up-modify-sn sn-percent-attack-boats g:= naval-attack-percentage)
	(up-modify-sn sn-maximum-town-size c:= 250)
	(attack-now)
	(up-modify-sn sn-maximum-town-size g:= outer-townsize)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-percent-attack-boats 0)
	(up-set-timer c: periodic-attack-timer g: periodic-attack-interval)
)

;periodic attacks, for solo games
(defrule
	(game-time > 300)
	(goal team-game NO)
	(up-timer-status periodic-attack-timer != timer-running)
=>
	(chat-local-to-self "periodic attack")
	(up-modify-sn sn-percent-attack-soldiers g:= land-attack-percentage)
	(up-modify-sn sn-percent-attack-boats g:= naval-attack-percentage)
	(up-modify-sn sn-maximum-town-size c:= 250)
	(attack-now)
	(up-modify-sn sn-maximum-town-size g:= outer-townsize)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-percent-attack-boats 0)
	(up-set-timer c: periodic-attack-timer g: periodic-attack-interval)
)

