
;rule jumps, do not add rules here
;dictate which method to attack with, TSA or Group handler
(defrule
	(up-timer-status t-attack-type <= timer-triggered)
	(soldier-count g:< gl-five-percent)
=>
	(set-goal attack-type-land TOWN-SIZE)
	(up-jump-rule 1)
)

(defrule
	(up-timer-status t-attack-type <= timer-triggered)
	(and
		(soldier-count g:> gl-five-percent)
		(soldier-count g:< gl-twenty-percent)
	)
=>
	(set-goal attack-type-land PERCENTAGE)
	(up-jump-rule 1)
)

(defrule
	(soldier-count g:>= gl-twenty-percent)
=>
	(set-goal attack-type-land GROUP)
	(up-jump-rule 1)
)

(defrule
	(warboat-count g:< gl-five-percent)
=>
	(set-goal attack-type-sea TOWN-SIZE)
	(up-jump-rule 1)
)

(defrule
	(and
		(warboat-count g:> gl-five-percent)
		(warboat-count g:< gl-twenty-percent)
	)
=>
	(set-goal attack-type-sea PERCENTAGE)
	(up-jump-rule 1)
)

(defrule
	(warboat-count g:>= gl-twenty-percent)
=>
	(set-goal attack-type-sea GROUP)
)
;rule jumps end

;retreat when forces are too dwindled
(defrule
	(up-timer-status t-retreat == timer-triggered)
	(current-age >= early-antiquity-age)
	(or
		(up-compare-goal gl-current-soldier-losses g:> gl-five-percent)
		(up-compare-goal gl-current-warboat-losses g:> gl-five-percent)
	)
=>
	(up-reset-attack-now)
	(up-reset-unit c: -1)
	(up-modify-sn sn-minimum-attack-group-size c:= 0)
	(up-modify-sn sn-maximum-attack-group-size c:= 0)
	(up-modify-sn sn-number-attack-groups c:= 0)
	(up-retreat-now)
	(up-modify-sn sn-minimum-attack-group-size g:= gl-pop-atkgrp-minsize)
	(up-modify-sn sn-maximum-attack-group-size g:= gl-pop-atkgrp-maxsize)
	(up-modify-sn sn-number-attack-groups g:= gl-pop-number-groups)
	(set-goal current-action ACTION-RETREAT)
)

(defrule
	(up-timer-status t-retreat == timer-triggered)
	(goal current-action ACTION-RETREAT)
=>
	(set-goal current-action ACTION-WAIT)
)

(defrule
	(up-compare-goal current-phase g:!= previous-phase)
	(goal current-phase 1)
=>
	(set-goal military-spread-time 1)
	(set-goal military-spread-interval 100)
	(set-goal preferred-target-player -1)
	(set-goal allow-wall-targeting 1)
	(set-goal smart-wall-targeting 1)
	(set-goal land-attack-delay 300)
	(set-goal land-attack-interval 120)
	(set-goal land-attack-requirement 6)
	(set-goal naval-attack-delay 300)
	(set-goal naval-attack-interval 120)
	(set-goal naval-attack-requirement 6)
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase g:!= previous-phase)
	(goal current-phase 2)
=>
	(set-goal military-spread-time 1)
	(set-goal military-spread-interval 100)
	(set-goal preferred-target-player -1)
	(set-goal allow-wall-targeting 1)
	(set-goal smart-wall-targeting 1)
	(set-goal land-attack-delay 300)
	(set-goal land-attack-interval 120)
	(set-goal land-attack-requirement 6)
	(set-goal naval-attack-delay 300)
	(set-goal naval-attack-interval 120)
	(set-goal naval-attack-requirement 6)
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase g:!= previous-phase)
	(goal current-phase 3)
=>
	(set-goal military-spread-time 1)
	(set-goal military-spread-interval 100)
	(set-goal preferred-target-player -1)
	(set-goal allow-wall-targeting 1)
	(set-goal smart-wall-targeting 1)
	(set-goal land-attack-delay 300)
	(set-goal land-attack-interval 120)
	(set-goal land-attack-requirement 6)
	(set-goal naval-attack-delay 300)
	(set-goal naval-attack-interval 120)
	(set-goal naval-attack-requirement 6)
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase g:!= previous-phase)
	(goal current-phase 4)
=>
	(set-goal military-spread-time 1)
	(set-goal military-spread-interval 100)
	(set-goal preferred-target-player -1)
	(set-goal allow-wall-targeting 1)
	(set-goal smart-wall-targeting 1)
	(set-goal land-attack-delay 300)
	(set-goal land-attack-interval 120)
	(set-goal land-attack-requirement 10)
	(set-goal naval-attack-delay 300)
	(set-goal naval-attack-interval 120)
	(set-goal naval-attack-requirement 6)
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase g:!= previous-phase)
	(goal current-phase 5)
=>
	(set-goal military-spread-time 1)
	(set-goal military-spread-interval 100)
	(set-goal preferred-target-player -1)
	(set-goal allow-wall-targeting 1)
	(set-goal smart-wall-targeting 1)
	(set-goal land-attack-delay 300)
	(set-goal land-attack-interval 120)
	(set-goal land-attack-requirement 10)
	(set-goal naval-attack-delay 300)
	(set-goal naval-attack-interval 120)
	(set-goal naval-attack-requirement 6)
	
	(disable-self)
)

;military superiority system, atm very rudimentary just to get it to stop attacking ALL THE TIME.
;0 means inferior, 1 is good enough to defend, 2 is equal, 3 is superior.

(defrule
	(up-timer-status t-mil-pop-check == timer-disabled)
=>
	(enable-timer t-mil-pop-check 60)
	(chat-local-to-self "start military population check timer")
)

(defrule
	(up-timer-status t-mil-pop-check == timer-triggered)
=>
	(disable-timer t-mil-pop-check)
	(set-goal check-mil-pop YES)
	(set-goal milcheck-concluded BEGAN)
	(up-modify-goal gl-team-combined-mil-pop c:= 0)
	(up-modify-goal gl-team-combined-navy c:= 0)
	(chat-local-to-self "start checking military populations")
)

(defrule
	(and
		(goal check-mil-pop YES)
		(goal milcheck-concluded BEGAN)
	)
=>
	(up-get-fact soldier-count 0 gl-own-military-population)
	(up-get-fact warboat-count 0 gl-own-navy)
	(up-get-fact-sum any-ally soldier-count 0 gl-team-military-population)
	(up-get-fact-sum any-ally warboat-count 0 gl-team-navy)
	(up-modify-goal gl-team-combined-mil-pop g:+ gl-own-military-population)
	(up-modify-goal gl-team-combined-navy g:+ gl-own-navy)
	(up-modify-goal gl-team-combined-mil-pop g:+ gl-team-military-population)
	(up-modify-goal gl-team-combined-navy g:+ gl-team-navy)
	(set-goal milcheck-concluded OWN)
	(chat-local-to-self "military population check, own team done")
)

(defrule
	(and
		(goal check-mil-pop YES)
		(goal milcheck-concluded OWN)
	)
=>
	(up-get-fact-sum any-enemy soldier-count 0 gl-enemy-team-military-population)
	(up-get-fact-sum any-enemy warboat-count 0 gl-enemy-team-navy)
	(up-get-fact-sum any-enemy soldier-count 0 gl-enemy-team-mil-pop-divided)
	(up-get-fact-sum any-enemy warboat-count 0 gl-enemy-team-navy-divided)
	(set-goal milcheck-concluded ENEMY)
	(chat-local-to-self "military population check, enemy team done")
)

(defrule
	(and
		(goal check-mil-pop YES)
		(goal milcheck-concluded ENEMY)
	)
=>
	(up-modify-goal gl-enemy-team-mil-pop-divided c:z/ 2)
	(up-modify-goal gl-enemy-team-navy-divided c:z/ 2)
	(set-goal milcheck-concluded COMPARISONS)
	(chat-local-to-self "military population check, comparisons done")
)

;land check

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-own-military-population g:< gl-enemy-team-military-population)
=>
	(set-goal military-superiority INFERIOR)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 10)
	(chat-local-to-self "military-superiority INFERIOR")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-team-combined-mil-pop g:< gl-enemy-team-military-population)
=>
	(set-goal military-superiority INFERIOR)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 10)
	(chat-local-to-self "military-superiority INFERIOR")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-own-military-population g:== gl-enemy-team-mil-pop-divided)
=>
	(set-goal military-superiority TOLERABLE)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 30)
	(chat-local-to-self "military-superiority TOLERABLE")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-team-combined-mil-pop g:== gl-enemy-team-mil-pop-divided)
=>
	(set-goal military-superiority TOLERABLE)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 30)
	(chat-local-to-self "military-superiority TOLERABLE")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-own-military-population g:== gl-enemy-team-military-population)
=>
	(set-goal military-superiority EQUAL)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 50)
	(chat-local-to-self "military-superiority EQUAL")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-team-combined-mil-pop g:== gl-enemy-team-military-population)
=>
	(set-goal military-superiority EQUAL)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 50)
	(chat-local-to-self "military-superiority EQUAL")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-own-military-population g:> gl-enemy-team-military-population)
=>
	(set-goal military-superiority SUPERIOR)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 80)
	(chat-local-to-self "military-superiority SUPERIOR")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded COMPARISONS)
		)
	)
	(up-compare-goal gl-team-combined-mil-pop g:> gl-enemy-team-military-population)
=>
	(set-goal military-superiority SUPERIOR)
	(set-goal milcheck-concluded CONCLUDED-LAND)
	(set-goal land-attack-percentage 80)
	(chat-local-to-self "military-superiority SUPERIOR")
)

;navy check

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-own-navy g:< gl-enemy-team-navy)
=>
	(set-goal naval-superiority INFERIOR)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 10)
	(chat-local-to-self "naval-superiority INFERIOR")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-team-combined-navy g:< gl-enemy-team-navy)
=>
	(set-goal naval-superiority INFERIOR)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 10)
	(chat-local-to-self "naval-superiority INFERIOR")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-own-navy g:== gl-enemy-team-navy-divided)
=>
	(set-goal naval-superiority TOLERABLE)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 30)
	(chat-local-to-self "naval-superiority TOLERABLE")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-team-combined-navy g:== gl-enemy-team-navy-divided)
=>
	(set-goal naval-superiority TOLERABLE)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 30)
	(chat-local-to-self "naval-superiority TOLERABLE")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-own-navy g:== gl-enemy-team-navy)
=>
	(set-goal naval-superiority EQUAL)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 50)
	(chat-local-to-self "naval-superiority EQUAL")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-team-combined-navy g:== gl-enemy-team-navy)
=>
	(set-goal naval-superiority EQUAL)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 50)
	(chat-local-to-self "naval-superiority EQUAL")
)

(defrule
	(and
		(goal team-game NO)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-own-navy g:> gl-enemy-team-navy)
=>
	(set-goal naval-superiority SUPERIOR)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 80)
	(chat-local-to-self "naval-superiority SUPERIOR")
)

(defrule
	(and
		(goal team-game YES)
		(and
			(goal check-mil-pop YES)
			(goal milcheck-concluded CONCLUDED-LAND)
		)
	)
	(up-compare-goal gl-team-combined-navy g:> gl-enemy-team-navy)
=>
	(set-goal naval-superiority SUPERIOR)
	(set-goal milcheck-concluded CONCLUDED-NAVY)
	(set-goal naval-attack-percentage 80)
	(chat-local-to-self "naval-superiority SUPERIOR")
)

;reset

(defrule
	(goal milcheck-concluded CONCLUDED-NAVY)
=>
	(set-goal milcheck-concluded RESET)
)

#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined DIFFICULTY-EXTREME

(defrule
	(true)
=>
	(set-goal scale-attack-timer 200)
	
	(disable-self)
)

#end-if
#end-if
#end-if
#end-if

#load-if-defined DIFFICULTY-MODERATE

(defrule
	(true)
=>
	(set-goal scale-attack-timer 100)
	
	(disable-self)
)

#end-if

#load-if-defined DIFFICULTY-HARD

(defrule
	(true)
=>
	(set-goal scale-attack-timer 50)
	
	(disable-self)
)

#end-if

#load-if-defined DIFFICULTY-HARDEST

(defrule
	(true)
=>
	(set-goal scale-attack-timer 25)
	
	(disable-self)
)

#end-if

#load-if-defined DIFFICULTY-EXTREME

(defrule
	(true)
=>
	(set-goal scale-attack-timer 12)
	
	(disable-self)
)

#end-if

;start of rule jumping, do not add rules before rule jumping ends

;rule 1
(defrule
	(up-compare-goal military-spread-time <= 0)
=>
	(up-jump-rule 3))
(defrule
	(goal spread-units 0)
	(up-timer-status t-unit-spread != timer-running)
=>
	(up-set-timer c: t-unit-spread g: military-spread-interval)
	(up-jump-rule 2)
	(disable-self)
)

;rule 2
(defrule
	(goal spread-units 1)
	(timer-triggered t-unit-spread)
=>
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-goal spread-units 0); sn-task-ungrouped-soldiers always 1 as a fact
	(up-set-timer c: t-unit-spread g: military-spread-interval)
)

;rule 3
(defrule
	(goal spread-units 0)
	(up-timer-status t-unit-spread != timer-running)
=>
	(set-strategic-number sn-task-ungrouped-soldiers 1)
	(set-goal spread-units 1)
	(up-set-timer c: t-unit-spread g: military-spread-time)
)

;rule 4
(defrule
	(up-compare-goal military-superiority >= 2)
	(players-building-count any-enemy >= 1)
=>
	(up-find-player enemy find-closest temporary-goal)
	(up-modify-sn sn-target-player-number g:= temporary-goal)
)

;rule 5
(defrule
	(up-compare-goal military-superiority >= 2)
	(or	
		(up-compare-goal preferred-target-player <= 0)
		(up-compare-goal preferred-target-player >= 9)
	)
=>
	(up-jump-rule 3)
)

;rule 6
(defrule
	(up-compare-goal military-superiority >= 2)
=>
	(up-modify-goal temporary-goal s:= sn-target-player-number)
	(up-modify-sn sn-target-player-number g:= preferred-target-player)
)

;rule 7
(defrule
	(up-compare-goal military-superiority >= 2)
	(players-building-count target-player >= 1)
	(player-in-game target-player)
(not	
	(stance-toward target-player ally)
)
=>
	(up-jump-rule 1)
)

;rule 8
(defrule
	(up-compare-goal military-superiority >= 2)
=>
	(up-modify-sn sn-target-player-number g:= temporary-goal)
	(up-jump-rule 1)
)

;rule 9
(defrule
	(up-compare-goal military-superiority >= 2)
=>
	(up-modify-sn sn-focus-player-number s:= sn-target-player-number)
)

;end of rule jumping

;rule 10
(defrule
(or	
	(goal allow-wall-targeting 0)
	(goal allow-wall-targeting 1)
)
=>
	(up-modify-sn sn-wall-targeting-mode g:= allow-wall-targeting)
)

(defrule
	(up-timer-status t-land-attack == timer-triggered)
	(nor
		(goal current-action ACTION-ATTACK)
		(goal current-action ACTION-RETREAT)
	)
=>
	(set-goal current-action ACTION-ATTACK)
)

(defrule
	(up-timer-status t-naval-attack == timer-triggered)
	(nor
		(goal current-action ACTION-ATTACK)
		(goal current-action ACTION-RETREAT)
	)
=>
	(set-goal current-action ACTION-ATTACK)
)

;rule 11
(defrule
	(up-compare-goal current-action c:= ACTION-ATTACK)
	(and
		(up-compare-goal attack-type-land c:= PERCENTAGE)
		(and
			(up-compare-goal land-attack-delay >= 0)
			(and
				(up-compare-goal gl-game-time g:>= land-attack-delay)
				(defend-soldier-count g:>= land-attack-requirement)
			)
		)
	)
=>
	(chat-local-to-self "land attack")
	(up-modify-sn sn-percent-attack-soldiers g:= land-attack-percentage)
	(attack-now)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(up-set-timer c: t-land-attack g: land-attack-interval)
)

;rule 12
(defrule
	(up-compare-goal current-action c:= ACTION-ATTACK)
	(and
		(up-compare-goal attack-type-sea c:= PERCENTAGE)
		(and
			(up-compare-goal naval-attack-delay >= 0)
			(and
				(up-compare-goal gl-game-time g:>= naval-attack-delay)
				(and
					(defend-warboat-count g:>= naval-attack-requirement)
					(up-timer-status t-naval-attack != timer-running)
				)
			)
		)
	)
=>
	(chat-local-to-self "naval attack")
	(up-modify-sn sn-percent-attack-boats g:= naval-attack-percentage)
	(attack-now)
	(set-strategic-number sn-percent-attack-boats 0)
)

(defrule
	(up-compare-goal current-action c:= ACTION-ATTACK)
	(and
		(up-compare-goal attack-type-land c:= TOWN-SIZE)
		(and
			(up-compare-goal land-attack-delay >= 0)
			(and
				(up-compare-goal gl-game-time g:>= land-attack-delay)
				(defend-soldier-count g:>= land-attack-requirement)
			)
		)
	)
=>
	(chat-local-to-self "land attack")
	(up-modify-sn sn-maximum-town-size c:= 250)
	(attack-now)
	(up-modify-sn sn-maximum-town-size g:= outer-townsize)
	(up-set-timer c: t-land-attack g: land-attack-interval)
)

(defrule
	(up-compare-goal current-action c:= ACTION-ATTACK)
	(and
		(up-compare-goal attack-type-sea c:= TOWN-SIZE)
		(and
			(up-compare-goal naval-attack-delay >= 0)
			(and
				(up-compare-goal gl-game-time g:>= naval-attack-delay)
				(and
					(defend-warboat-count g:>= naval-attack-requirement)
					(up-timer-status t-naval-attack != timer-running)
				)
			)
		)
	)
=>
	(chat-local-to-self "naval attack")
	(up-modify-sn sn-maximum-town-size c:= 250)
	(attack-now)
	(up-modify-sn sn-maximum-town-size g:= outer-townsize)
)

;periodic attacks, if not flank player
(defrule
	(game-time > 300)
	(goal flank-position 0)
	(up-timer-status t-periodic-attack != timer-running)
=>
	(chat-local-to-self "periodic attack")
	(up-modify-sn sn-percent-attack-soldiers g:= land-attack-percentage)
	(up-modify-sn sn-percent-attack-boats g:= naval-attack-percentage)
	(up-modify-sn sn-maximum-town-size c:= 250)
	(attack-now)
	(up-modify-sn sn-maximum-town-size g:= outer-townsize)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-percent-attack-boats 0)
	(up-set-timer c: t-periodic-attack g: periodic-attack-interval)
)

;periodic attacks, for solo games
(defrule
	(game-time > 300)
	(goal team-game NO)
	(up-timer-status t-periodic-attack != timer-running)
=>
	(chat-local-to-self "periodic attack")
	(up-modify-sn sn-percent-attack-soldiers g:= land-attack-percentage)
	(up-modify-sn sn-percent-attack-boats g:= naval-attack-percentage)
	(up-modify-sn sn-maximum-town-size c:= 250)
	(attack-now)
	(up-modify-sn sn-maximum-town-size g:= outer-townsize)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-percent-attack-boats 0)
	(up-set-timer c: t-periodic-attack g: periodic-attack-interval)
)

;loss counter

(defrule
	(up-timer-status t-check-losses == timer-triggered)
=>
	(up-modify-goal gl-previous-civilian-count g:= gl-past-civilian-count)
	(up-modify-goal gl-previous-soldier-count g:= gl-past-soldier-count)
	(up-modify-goal gl-previous-warboat-count g:= gl-past-warboat-count)
	(up-modify-goal gl-past-civilian-count c:= 0)
	(up-modify-goal gl-past-soldier-count c:= 0)
	(up-modify-goal gl-past-warboat-count c:= 0)
	(up-modify-goal gl-past-civilian-count g:= gl-current-civilian-count)
	(up-get-fact civilian-population 0 gl-current-civilian-count)
	(up-modify-goal gl-past-soldier-count g:= gl-current-soldier-count)
	(up-get-fact soldier-count 0 gl-current-soldier-count)
	(up-modify-goal gl-past-warboat-count g:= gl-current-warboat-count)
	(up-get-fact warboat-count 0 gl-current-warboat-count)
	(up-chat-data-to-self "current civilian count: %d." g: gl-current-civilian-count)
	(up-chat-data-to-self "past civilian count: %d." g: gl-past-civilian-count)
	(up-chat-data-to-self "current soldier count: %d." g: gl-current-soldier-count)
	(up-chat-data-to-self "past soldier count: %d." g: gl-past-soldier-count)
	(up-chat-data-to-self "current warboat count: %d." g: gl-current-warboat-count)
	(up-chat-data-to-self "past warboat count: %d." g: gl-past-warboat-count)
)

(defrule
	(up-timer-status t-check-losses == timer-triggered)
	(up-compare-goal gl-previous-civilian-count g:> gl-current-civilian-count)
=>
	(up-modify-goal gl-previous-civilian-losses g:= gl-current-civilian-losses)
	(up-modify-goal gl-civilian-loss-counter g:= gl-previous-civilian-count)
	(up-modify-goal gl-civilian-loss-counter g:- gl-current-civilian-count)
	(up-modify-goal gl-current-civilian-losses g:= gl-civilian-loss-counter)
	(up-modify-goal gl-total-civilian-losses g:+ gl-civilian-loss-counter)
	(up-chat-data-to-self "previous civilian losses: %d." g: gl-previous-civilian-losses)
	(up-chat-data-to-self "current civilian losses: %d." g: gl-current-civilian-losses)
	(up-chat-data-to-self "total civilian losses: %d." g: gl-total-civilian-losses)
)

(defrule
	(up-timer-status t-check-losses == timer-triggered)
	(up-compare-goal gl-previous-soldier-count g:> gl-current-soldier-count)
=>
	(up-modify-goal gl-previous-soldier-losses g:= gl-current-soldier-losses)
	(up-modify-goal gl-soldier-loss-counter g:= gl-previous-soldier-count)
	(up-modify-goal gl-soldier-loss-counter g:- gl-current-soldier-count)
	(up-modify-goal gl-current-soldier-losses g:= gl-soldier-loss-counter)
	(up-modify-goal gl-total-soldier-losses g:+ gl-soldier-loss-counter)
	(up-chat-data-to-self "previous soldier losses: %d." g: gl-previous-soldier-losses)
	(up-chat-data-to-self "current soldier losses: %d." g: gl-current-soldier-losses)
	(up-chat-data-to-self "total soldier losses: %d." g: gl-total-soldier-losses)
)

(defrule
	(up-timer-status t-check-losses == timer-triggered)
	(up-compare-goal gl-previous-warboat-count g:> gl-current-warboat-count)
=>
	(up-modify-goal gl-previous-warboat-losses g:= gl-current-warboat-losses)
	(up-modify-goal gl-warboat-loss-counter g:= gl-previous-warboat-count)
	(up-modify-goal gl-warboat-loss-counter g:- gl-current-warboat-count)
	(up-modify-goal gl-current-warboat-losses g:= gl-warboat-loss-counter)
	(up-modify-goal gl-total-warboat-losses g:+ gl-warboat-loss-counter)
	(up-chat-data-to-self "previous warboat losses: %d." g: gl-previous-warboat-losses)
	(up-chat-data-to-self "current warboat losses: %d." g: gl-current-warboat-losses)
	(up-chat-data-to-self "total warboat losses: %d." g: gl-total-warboat-losses)
)

;toggle allowed military units based on civ specialties, and current phase

(defrule
	(game-time >= 60)
=>
	(set-goal train-scoutships YES)
	(chat-local-to-self "Allow Scout Ships for everyone from the beginning")
	
	(disable-self)
)

;aging up to early antiquity & middle antiquity allowed trains

(defrule
	(or
		(up-compare-goal current-phase == 2)
		(up-compare-goal current-phase == 4)
	)
	(and
		(goal civ-specialty1 SPE-INFANTRY)
		(goal has-horus NO)
	)
	(goal train-champion NO)
	(goal train-spearman NO)
	(goal train-skirmisher NO)
=>
	(set-goal train-champion YES)
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Infantry Civilization that does not have Horus Scout/Warrior, allow Champion, Spearman, and Skirmisher training before Middle Antiquity Age")
)

(defrule
	(or
		(up-compare-goal current-phase == 2)
		(up-compare-goal current-phase == 4)
	)
	(and
		(goal civ-specialty1 SPE-INFANTRY)
		(goal has-horus YES)
	)
	(goal train-horus NO)
	(goal train-spearman NO)
	(goal train-skirmisher NO)
=>
	(set-goal train-horus YES)
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Infantry Civilization that has Horus Scout/Warrior, allow Horus Scout/Warrior, Spearman, and Skirmisher training before Middle Antiquity Age while aging up")
)

(defrule
	(or
		(up-compare-goal current-phase == 2)
		(up-compare-goal current-phase == 4)
	)
	(goal civ-specialty1 SPE-NAVAL)
	(goal train-spearman NO)
	(goal train-skirmisher NO)
=>
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Naval Civilization, allow Spearman, and Skirmisher training before Middle Antiquity Age while aging up")
)

(defrule
	(or
		(up-compare-goal current-phase == 2)
		(up-compare-goal current-phase == 4)
	)
	(goal civ-specialty1 SPE-SIEGE)
	(goal train-spearman NO)
	(goal train-skirmisher NO)
=>
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Siege Civilization, allow Spearman, and Skirmisher training before Middle Antiquity Age while aging up")
)

(defrule
	(or
		(up-compare-goal current-phase == 2)
		(up-compare-goal current-phase == 4)
	)
	(goal civ-specialty1 SPE-PRIEST)
	(goal train-spearman NO)
	(goal train-skirmisher NO)
=>
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Priest Civilization, allow Spearman, and Skirmisher training before Middle Antiquity Age while aging up")
)

(defrule
	(or
		(up-compare-goal current-phase == 2)
		(up-compare-goal current-phase == 4)
	)
	(goal civ-specialty1 SPE-ARCHER)
	(goal train-bowman NO)
	(goal train-spearman NO)
	(goal train-skirmisher NO)
=>
	(set-goal train-bowman YES)
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Archer Civilization, allow Bowman, Spearman, and Skirmisher training before Middle Antiquity Age while aging up")
)

(defrule
	(or
		(up-compare-goal current-phase == 2)
		(up-compare-goal current-phase == 4)
	)
	(goal civ-specialty1 SPE-CAVARCHER)
	(goal train-bowman NO)
	(goal train-spearman NO)
	(goal train-skirmisher NO)
=>
	(set-goal train-bowman YES)
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Cavalry Archer Civilization, allow Bowman, Spearman, and Skirmisher training before Middle Antiquity Age while aging up")
)

(defrule
	(or
		(up-compare-goal current-phase == 2)
		(up-compare-goal current-phase == 4)
	)
	(goal civ-specialty1 SPE-ADVWEAP)
	(goal train-bowman NO)
	(goal train-spearman NO)
	(goal train-skirmisher NO)
=>
	(set-goal train-bowman YES)
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Advanced Weaponry Civilization, allow Bowman, Spearman, and Skirmisher training before Middle Antiquity Age while aging up")
)

(defrule
	(or
		(up-compare-goal current-phase == 2)
		(up-compare-goal current-phase == 4)
	)
	(goal civ-specialty1 SPE-CAVALRY)
	(goal train-cavalry NO)
	(goal train-scoutcav NO)
	(goal train-skirmisher NO)
=>
	(set-goal train-cavalry YES)
	(set-goal train-scoutcav YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Cavalry Civilization, allow Cavalry, Light Cavalry, and Skirmisher training before Middle Antiquity Age while aging up")
)

(defrule
	(or
		(up-compare-goal current-phase == 2)
		(up-compare-goal current-phase == 4)
	)
	(goal civ-specialty1 SPE-ELEPHANT)
	(goal train-cavalry NO)
	(goal train-scoutcav NO)
	(goal train-skirmisher NO)
=>
	(set-goal train-cavalry YES)
	(set-goal train-scoutcav YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Elephant Civilization, allow Cavalry, Light Cavalry, and Skirmisher training before Middle Antiquity Age while aging up")
)

;early antiquity allowed trains

;disable gold trains
(defrule
	(up-compare-goal current-phase == 3)
=>
	(set-goal train-champion NO)
	(set-goal train-horus NO)
	(set-goal train-bowman NO)
	(set-goal train-cavalry NO)
	(chat-local-to-self "Early Antiquity Age disallow gold costing units training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase == 3)
	(and
		(goal civ-specialty1 SPE-INFANTRY)
		(goal has-horus NO)
	)
=>
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Infantry Civilization that does not have Horus Scout/Warrior, Spearman, and Skirmisher training while in Early Antiquity Age")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase == 3)
	(and
		(goal civ-specialty1 SPE-INFANTRY)
		(goal has-horus YES)
	)
=>
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Infantry Civilization that has Horus Scout/Warrior, Spearman, and Skirmisher training while in Early Antiquity Age")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase == 3)
	(goal civ-specialty1 SPE-NAVAL)
=>
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Naval Civilization, allow Spearman, and Skirmisher training while in Early Antiquity Age")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase == 3)
	(goal civ-specialty1 SPE-SIEGE)
=>
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Siege Civilization, allow Spearman, and Skirmisher training while in Early Antiquity Age")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase == 3)
	(goal civ-specialty1 SPE-PRIEST)
=>
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Priest Civilization, allow Spearman, and Skirmisher training while in Early Antiquity Age")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase == 3)
	(goal civ-specialty1 SPE-ARCHER)
=>
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Archer Civilization, Spearman, and Skirmisher training while in Early Antiquity Age")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase == 3)
	(goal civ-specialty1 SPE-CAVARCHER)
=>
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Cavalry Archer Civilization, Spearman, and Skirmisher training while in Early Antiquity Age")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase == 3)
	(goal civ-specialty1 SPE-ADVWEAP)
=>
	(set-goal train-spearman YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Advanced Weaponry Civilization, Spearman, and Skirmisher training while in Early Antiquity Age")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase == 3)
	(goal civ-specialty1 SPE-CAVALRY)
=>
	(set-goal train-scoutcav YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Cavalry Civilization, Light Cavalry, and Skirmisher training while in Early Antiquity Age")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase == 3)
	(goal civ-specialty1 SPE-ELEPHANT)
=>
	(set-goal train-scoutcav YES)
	(set-goal train-skirmisher YES)
	(chat-local-to-self "Elephant Civilization, Light Cavalry, and Skirmisher training while in Early Antiquity Age")
	
	(disable-self)
)

; middle antiquity age onward affinities define what units will be enabled

;barracks
(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal champion-affinity >= 80)
=>
	(set-goal train-champion YES)
	(chat-local-to-self ">=Middle Antiquity, Champion affinity >= 80, enable Champion training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal spearman-affinity >= 66)
=>
	(set-goal train-spearman YES)
	(chat-local-to-self ">=Middle Antiquity, Spearman affinity >= 66, enable Spearman training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal horus-affinity >= 50)
=>
	(set-goal train-horus YES)
	(chat-local-to-self ">=Middle Antiquity, Horus affinity >= 50, enable Horus training")
	
	(disable-self)
)

;archery range
(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal archer-affinity >= 99)
=>
	(set-goal train-bowman YES)
	(chat-local-to-self ">=Middle Antiquity, Bowman affinity >= 99, enable Bowman training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal skirmisher-affinity >= 50)
=>
	(set-goal train-skirmisher YES)
	(chat-local-to-self ">=Middle Antiquity, Skirmisher affinity >= 50, enable Skirmisher training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase == 7)
	(unit-available crossbowman)
=>
	(set-goal train-crossbow YES)
	(chat-local-to-self "Imperial Age, Crossbowman available, enable Crossbowman training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal cavarcher-affinity >= 100)
=>
	(set-goal train-cavarcher YES)
	(chat-local-to-self ">=Middle Antiquity, Cavalry Archer affinity >= 100, enable Cavalry Archer training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal camarcher-affinity >= 100)
=>
	(set-goal train-cmlarcher YES)
	(chat-local-to-self ">=Middle Antiquity, Camel Archer affinity >= 100, enable Camel Archer training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal elearcher-affinity >= 100)
=>
	(set-goal train-elearcher YES)
	(chat-local-to-self ">=Middle Antiquity, Elephant Archer affinity >= 100, enable Elephant Archer training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal chrarcher-affinity >= 100)
=>
	(set-goal train-chrarcher YES)
	(chat-local-to-self ">=Middle Antiquity, Chariot Archer affinity >= 100, enable Chariot Archer training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal chrarcher-affinity >= 100)
=>
	(set-goal train-bowman NO)
	(chat-local-to-self ">=Middle Antiquity, Chariot Archer available, disable Bowman training")
	
	(disable-self)
)

;stable
(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal scavalry-affinity >= 66)
=>
	(set-goal train-scoutcav YES)
	(chat-local-to-self ">=Middle Antiquity, Scout Cavalry affinity >= 66, enable Scout Cavalry training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal cavalry-affinity >= 66)
	(not
		(unit-available ratha-melee-line)
	)
=>
	(set-goal train-cavalry YES)
	(chat-local-to-self ">=Middle Antiquity, Cavalry affinity >= 66, enable Cavalry training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal cavalry-affinity >= 100)
	(unit-available ratha-melee-line)
=>
	(set-goal train-ratha YES)
	(chat-local-to-self ">=Middle Antiquity, Cavalry affinity >= 100, enable Ratha training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal crider-affinity >= 100)
=>
	(set-goal train-camel YES)
	(chat-local-to-self ">=Middle Antiquity, Camel affinity >= 100, enable Camel training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal chariot-affinity >= 100)
=>
	(set-goal train-chariot YES)
	(chat-local-to-self ">=Middle Antiquity, Chariot affinity >= 100, enable Chariot training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal belephant-affinity >= 100)
=>
	(set-goal train-elephant YES)
	(chat-local-to-self ">=Middle Antiquity, Battle Elephant affinity >= 100, enable Battle Elephant training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal ram-affinity >= 66)
=>
	(set-goal train-ram YES)
	(chat-local-to-self ">=Middle Antiquity, Ram affinity >= 66, enable Ram training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal mangonel-affinity >= 66)
=>
	(set-goal train-onager YES)
	(chat-local-to-self ">=Middle Antiquity, Mangonel affinity >= 66, enable Mangonel training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(up-compare-goal catapult-affinity >= 100)
=>
	(set-goal train-onager YES)
	(chat-local-to-self ">=Middle Antiquity, Catapult affinity >= 100, enable Catapult training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(or
		(goal civ-specialty2 SPE-PRIEST)
		(goal good-priests YES)
	)
=>
	(set-goal train-priest YES)
	(chat-local-to-self ">=Middle Antiquity, Good priests, enable priest training")
	
	(disable-self)
)


#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE

(defrule
	(and
		(up-timer-status t-unit-type != timer-running)
		(gold-amount < 500)
	)
	(goal train-type MAIN)
=>
	(chat-local-to-self "unit type switch to TRASH")
	(set-goal train-type TRASH)
)

(defrule
	(and
		(up-timer-status t-unit-type != timer-running)
		(gold-amount > 500)
	)
	(goal train-type MAIN)
=>
	(chat-local-to-self "unit type switch to TRASH")
	(set-goal train-type TRASH)
)

(defrule
	(and
		(up-timer-status t-unit-type != timer-running)
		(gold-amount > 500)
	)
	(goal train-type TRASH)
=>
	(chat-local-to-self "unit type switch to MAIN")
	(set-goal train-type MAIN)
)

;allow navy training once we have sufficient gold and wood

(defrule
	(and
		(goal train-scoutships NO)
		(wood-amount > 500)
	)
=>
	(chat-local-to-self "allow scout ship training")
	(set-goal train-scoutships YES)
)


(defrule
	(and
		(wood-amount > 500)
		(gold-amount > 500)
	)
	(or
		(goal train-remes NO)
		(or
			(goal train-fireships NO)
			(or
				(goal train-demoships NO)
				(or
					(goal train-hemiolia NO)
					(goal train-boardingships NO)
				)
			)
		)
	)
=>
	(chat-local-to-self "allow navy training")
	(set-goal train-remes YES)
	(set-goal train-fireships YES)
	(set-goal train-demoships YES)
	(set-goal train-hemiolia YES)
	(set-goal train-boardingships YES)
)

;disallow it if we don't

(defrule
	(and
		(goal train-scoutships YES)
		(wood-amount < 500)
	)
=>
	(chat-local-to-self "disallow scout ship training")
	(set-goal train-scoutships NO)
)

(defrule
	(and
		(wood-amount < 500)
		(gold-amount < 500)
	)
	(or
		(goal train-remes YES)
		(or
			(goal train-fireships YES)
			(or
				(goal train-demoships YES)
				(or
					(goal train-hemiolia YES)
					(goal train-boardingships YES)
				)
			)
		)
	)
=>
	(chat-local-to-self "disallow navy training")
	(set-goal train-remes NO)
	(set-goal train-fireships NO)
	(set-goal train-demoships NO)
	(set-goal train-hemiolia NO)
	(set-goal train-boardingships NO)
)

;good navies begin

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(not
		(goal ship-train SCOUTSHIP)
	)
	(unit-type-count-total scout-galley-line g:< gl-no-percent)
=>
	(chat-local-to-self "ship type switch to SCOUTSHIP")
	(set-goal ship-train SCOUTSHIP)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(and
		(not
			(goal ship-train SCOUTSHIP)
		)
		(nor
			(goal ship-train POLYREME)
			(goal ship-train HEMIOLIA)
		)
	)
	(unit-type-count-total polyreme-line g:< gl-no-percent)
	(unit-type-count-total fire-ship-line g:> gl-no-percent)
=>
	(chat-local-to-self "ship type switch to POLYREME")
	(set-goal ship-train POLYREME)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(nor
		(goal ship-train SCOUTSHIP)
		(goal ship-train HEMIOLIA)
	)
	(unit-type-count-total fire-ship-line g:< gl-no-percent)
=>
	(chat-local-to-self "ship type switch to FIRESHIP")
	(set-goal ship-train FIRESHIP)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(nor
		(goal ship-train SCOUTSHIP)
		(goal ship-train HEMIOLIA)
	)
	(unit-type-count-total hemiolia-line g:< gl-no-percent)
=>
	(chat-local-to-self "ship type switch to HEMIOLIA")
	(set-goal ship-train HEMIOLIA)
)

;good navies end

;bad navies begin

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy NO)
	)
	(nor
		(goal ship-train POLYREME)
		(goal ship-train DEMOSHIP)
	)
	(unit-type-count-total polyreme-line g:< gl-no-percent)
	(unit-type-count-total fire-ship-line g:> gl-no-percent)
=>
	(chat-local-to-self "ship type switch to POLYREME")
	(set-goal ship-train POLYREME)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy NO)
	)
	(nor
		(goal ship-train FIRESHIP)
		(goal ship-train DEMOSHIP)
	)
	(unit-type-count-total fire-ship-line g:< gl-no-percent)
=>
	(chat-local-to-self "ship type switch to FIRESHIP")
	(set-goal ship-train FIRESHIP)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy NO)
	)
	(and
		(goal good-priests YES)
		(nor
			(goal ship-train FIRESHIP)
			(goal ship-train BOARDINGSHIP)
		)
	)
	(unit-type-count-total boarding-ship g:< gl-no-percent)
=>
	(chat-local-to-self "ship type switch to BOARDINGSHIP")
	(set-goal ship-train BOARDINGSHIP)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy NO)
	)
	(nor
		(goal ship-train FIRESHIP)
		(goal ship-train BOARDINGSHIP)
	)
	(unit-type-count-total demolition-ship-line g:< gl-no-percent)
=>
	(chat-local-to-self "ship type switch to DEMOSHIP")
	(set-goal ship-train DEMOSHIP)
)

;bad navies begin

;once we have some navy, just go through the types in order

;good navies begin

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(goal ship-train JUGGERNAUT)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total hemiolia-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to SCOUTSHIP")
	(set-goal ship-train SCOUTSHIP)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(goal ship-train SCOUTSHIP)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total hemiolia-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to POLYREME")
	(set-goal ship-train POLYREME)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(goal ship-train POLYREME)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total hemiolia-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to FIRESHIP")
	(set-goal ship-train FIRESHIP)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(goal ship-train FIRESHIP)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total hemiolia-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to HEMIOLIA")
	(set-goal ship-train HEMIOLIA)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(goal ship-train HEMIOLIA)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total hemiolia-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to BOARDINGSHIP")
	(set-goal ship-train BOARDINGSHIP)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(goal ship-train BOARDINGSHIP)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total hemiolia-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to Q-REME")
	(set-goal ship-train Q-REME)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(goal ship-train Q-REME)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total hemiolia-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to OCTERES")
	(set-goal ship-train OCTERES)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy YES)
	)
	(goal ship-train OCTERES)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total hemiolia-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to JUGGERNAUT")
	(set-goal ship-train JUGGERNAUT)
)

;good navies end

;bad navies begin

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy NO)
	)
	(goal ship-train JUGGERNAUT)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total demolition-ship-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to SCOUTSHIP")
	(set-goal ship-train SCOUTSHIP)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy NO)
	)
	(goal ship-train SCOUTSHIP)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total demolition-ship-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to POLYREME")
	(set-goal ship-train POLYREME)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy NO)
	)
	(goal ship-train POLYREME)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total demolition-ship-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to FIRESHIP")
	(set-goal ship-train FIRESHIP)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy NO)
	)
	(goal ship-train FIRESHIP)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total demolition-ship-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to DEMOSHIP")
	(set-goal ship-train DEMOSHIP)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy NO)
	)
	(goal ship-train DEMOSHIP)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total demolition-ship-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to BOARDINGSHIP")
	(set-goal ship-train BOARDINGSHIP)
)

(defrule
	(and
		(up-timer-status t-ship-train != timer-running)
		(goal good-navy NO)
	)
	(goal ship-train BOARDINGSHIP)
	(and
		(unit-type-count-total polyreme-line g:>= gl-no-percent)
		(and
			(unit-type-count-total fire-ship-line g:>= gl-no-percent)
			(unit-type-count-total demolition-ship-line g:>= gl-no-percent)
		)
	)
=>
	(chat-local-to-self "ship type switch to JUGGERNAUT")
	(set-goal ship-train JUGGERNAUT)
)

;bad navies end

(defrule
	(up-compare-goal current-phase >= 5)
	(or
		(goal civ-specialty1 SPE-NAVAL)
		(or
			(goal civ-specialty2 SPE-NAVAL)
			(goal good-navy YES)
		)
	)
=>
	(set-goal train-scoutships YES)
	(set-goal train-remes YES)
	(set-goal train-fireships YES)
	(set-goal train-demoships YES)
	(set-goal train-hemiolia YES)
	(set-goal train-boardingships YES)
	(chat-local-to-self ">=Middle Antiquity, Good Navy, enable all combat vessel training")
	
	(disable-self)
)

(defrule
	(up-compare-goal current-phase >= 5)
	(goal good-navy NO)
=>
	(set-goal train-scoutships YES)
	(set-goal train-remes NO)
	(set-goal train-fireships YES)
	(set-goal train-demoships YES)
	(set-goal train-hemiolia NO)
	(set-goal train-boardingships YES)
	(chat-local-to-self ">=Middle Antiquity, Good Navy, enable Scout Ship, Fire Ship, Demolition Ship, Boarding Ship training")
	
	(disable-self)
)

#end-if
#end-if
#end-if

#load-if-not-defined DIFFICULTY-EXTREME
#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined DIFFICULTY-HARD

;allow navy training once we have sufficient gold and wood

(defrule
	(and
		(goal train-scoutships NO)
		(wood-amount > 250)
	)
=>
	(chat-local-to-self "allow scout ship training")
	(set-goal train-scoutships YES)
)


(defrule
	(and
		(wood-amount > 250)
		(gold-amount > 250)
	)
	(or
		(goal train-remes NO)
		(or
			(goal train-fireships NO)
			(or
				(goal train-demoships NO)
				(or
					(goal train-hemiolia NO)
					(goal train-boardingships NO)
				)
			)
		)
	)
=>
	(chat-local-to-self "allow navy training")
	(set-goal train-remes YES)
	(set-goal train-fireships YES)
	(set-goal train-demoships YES)
	(set-goal train-hemiolia YES)
	(set-goal train-boardingships YES)
)

;disallow it if we don't

(defrule
	(and
		(goal train-scoutships YES)
		(wood-amount < 500)
	)
=>
	(chat-local-to-self "disallow scout ship training")
	(set-goal train-scoutships NO)
)

(defrule
	(and
		(wood-amount < 250)
		(gold-amount < 250)
	)
	(or
		(goal train-remes YES)
		(or
			(goal train-fireships YES)
			(or
				(goal train-demoships YES)
				(or
					(goal train-hemiolia YES)
					(goal train-boardingships YES)
				)
			)
		)
	)
=>
	(chat-local-to-self "disallow navy training")
	(set-goal train-remes NO)
	(set-goal train-fireships NO)
	(set-goal train-demoships NO)
	(set-goal train-hemiolia NO)
	(set-goal train-boardingships NO)
)

;just go through ship types in order...

(defrule
	(up-timer-status t-ship-train != timer-running)
	(goal ship-train JUGGERNAUT)
=>
	(chat-local-to-self "ship type switch to SCOUTSHIP")
	(set-goal ship-train SCOUTSHIP)
)

(defrule
	(up-timer-status t-ship-train != timer-running)
	(goal ship-train SCOUTSHIP)
=>
	(chat-local-to-self "ship type switch to POLYREME")
	(set-goal ship-train POLYREME)
)

(defrule
	(up-timer-status t-ship-train != timer-running)
	(goal ship-train POLYREME)
=>
	(chat-local-to-self "ship type switch to FIRESHIP")
	(set-goal ship-train FIRESHIP)
)

(defrule
	(up-timer-status t-ship-train != timer-running)
	(goal ship-train FIRESHIP)
=>
	(chat-local-to-self "ship type switch to HEMIOLIA")
	(set-goal ship-train HEMIOLIA)
)

(defrule
	(up-timer-status t-ship-train != timer-running)
	(goal ship-train HEMIOLIA)
=>
	(chat-local-to-self "ship type switch to BOARDINGSHIP")
	(set-goal ship-train BOARDINGSHIP)
)

(defrule
	(up-timer-status t-ship-train != timer-running)
	(goal ship-train BOARDINGSHIP)
=>
	(chat-local-to-self "ship type switch to Q-REME")
	(set-goal ship-train Q-REME)
)

(defrule
	(up-timer-status t-ship-train != timer-running)
	(goal ship-train Q-REME)
=>
	(chat-local-to-self "ship type switch to OCTERES")
	(set-goal ship-train OCTERES)
)

(defrule
	(up-timer-status t-ship-train != timer-running)
	(goal ship-train OCTERES)
=>
	(chat-local-to-self "ship type switch to JUGGERNAUT")
	(set-goal ship-train JUGGERNAUT)
)

#end-if
#end-if
#end-if
