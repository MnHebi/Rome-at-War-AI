
;========================BARRACKS BEGIN========================

;========================CHAMPION BEGIN========================

#load-if-not-defined BYZANTINE-CIV ; Roman Empire
#load-if-not-defined ITALIAN-CIV ; Roman Republic
#load-if-not-defined KHMER-CIV ; Pontus
#load-if-not-defined BURMESE-CIV ; Seleucids

(defrule
	(and
		(goal train-champion YES)
		(goal primary-unit CHAMPION)
	)
	(unit-type-count-total militiaman-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: militiaman-line)
=>
	(up-train gl-unitescrow-state c: militiaman-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal secondary-unit CHAMPION)
	)
	(unit-type-count-total militiaman-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: militiaman-line)
=>
	(up-train gl-unitescrow-state c: militiaman-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal tertiary-unit CHAMPION)
	)
	(unit-type-count-total militiaman-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: militiaman-line)
=>
	(up-train gl-unitescrow-state c: militiaman-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal quaternary-unit CHAMPION)
	)
	(unit-type-count-total militiaman-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: militiaman-line)
=>
	(up-train gl-unitescrow-state c: militiaman-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal primary-support-unit CHAMPION)
	)
	(unit-type-count-total militiaman-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: militiaman-line)
=>
	(up-train gl-unitescrow-state c: militiaman-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal secondary-support-unit CHAMPION)
	)
	(unit-type-count-total militiaman-line g:< gl-no-percent)
	(up-can-train gl-unitescrow-state c: militiaman-line)
=>
	(up-train gl-unitescrow-state c: militiaman-line)
)

#end-if
#end-if
#end-if
#end-if

;========================ROMAN EMPIRE========================

#load-if-defined BYZANTINE-CIV

(defrule
	(and
		(goal train-champion YES)
		(goal primary-unit CHAMPION)
	)
	(unit-type-count-total legionary-ranged-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: legionary-ranged-line)
=>
	(up-train gl-unitescrow-state c: legionary-ranged-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal secondary-unit CHAMPION)
	)
	(unit-type-count-total legionary-ranged-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: legionary-ranged-line)
=>
	(up-train gl-unitescrow-state c: legionary-ranged-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal tertiary-unit CHAMPION)
	)
	(unit-type-count-total legionary-ranged-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: legionary-ranged-line)
=>
	(up-train gl-unitescrow-state c: legionary-ranged-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal quaternary-unit CHAMPION)
	)
	(unit-type-count-total legionary-ranged-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: legionary-ranged-line)
=>
	(up-train gl-unitescrow-state c: legionary-ranged-line)
)

#end-if

;========================ROMAN REPUBLIC========================

#load-if-defined ITALIAN-CIV

(defrule
	(and
		(goal train-champion YES)
		(goal primary-unit CHAMPION)
	)
	(unit-type-count-total legionary-melee-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: legionary-melee-line)
=>
	(up-train gl-unitescrow-state c: legionary-melee-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal secondary-unit CHAMPION)
	)
	(unit-type-count-total legionary-melee-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: legionary-melee-line)
=>
	(up-train gl-unitescrow-state c: legionary-melee-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal tertiary-unit CHAMPION)
	)
	(unit-type-count-total legionary-melee-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: legionary-melee-line)
=>
	(up-train gl-unitescrow-state c: legionary-melee-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal quaternary-unit CHAMPION)
	)
	(unit-type-count-total legionary-melee-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: legionary-melee-line)
=>
	(up-train gl-unitescrow-state c: legionary-melee-line)
)

#end-if

;========================PONTUS========================

#load-if-defined KHMER-CIV

(defrule
	(and
		(goal train-champion YES)
		(goal primary-unit CHAMPION)
	)
	(unit-type-count-total imitation-legionary-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: imitation-legionary-line)
=>
	(up-train gl-unitescrow-state c: imitation-legionary-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal secondary-unit CHAMPION)
	)
	(unit-type-count-total imitation-legionary-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: imitation-legionary-line)
=>
	(up-train gl-unitescrow-state c: imitation-legionary-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal tertiary-unit CHAMPION)
	)
	(unit-type-count-total imitation-legionary-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: imitation-legionary-line)
=>
	(up-train gl-unitescrow-state c: imitation-legionary-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal quaternary-unit CHAMPION)
	)
	(unit-type-count-total imitation-legionary-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: imitation-legionary-line)
=>
	(up-train gl-unitescrow-state c: imitation-legionary-line)
)

#end-if

;========================SELEUCIDS========================

#load-if-defined BURMESE-CIV

(defrule
	(and
		(goal train-champion YES)
		(goal primary-unit CHAMPION)
	)
	(unit-type-count-total imitation-legionary-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: imitation-legionary-line)
=>
	(up-train gl-unitescrow-state c: imitation-legionary-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal secondary-unit CHAMPION)
	)
	(unit-type-count-total imitation-legionary-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: imitation-legionary-line)
=>
	(up-train gl-unitescrow-state c: imitation-legionary-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal tertiary-unit CHAMPION)
	)
	(unit-type-count-total imitation-legionary-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: imitation-legionary-line)
=>
	(up-train gl-unitescrow-state c: imitation-legionary-line)
)

(defrule
	(and
		(goal train-champion YES)
		(goal quaternary-unit CHAMPION)
	)
	(unit-type-count-total imitation-legionary-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: imitation-legionary-line)
=>
	(up-train gl-unitescrow-state c: imitation-legionary-line)
)

#end-if

;========================CHAMPION END========================

;========================SPEARMAN BEGIN========================

(defrule
	(and
		(goal train-spearman YES)
		(goal primary-unit SPEARMAN)
	)
	(unit-type-count-total spearman-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: spearman-line)
=>
	(up-train gl-unitescrow-state c: spearman-line)
)

(defrule
	(and
		(goal train-spearman YES)
		(goal secondary-unit SPEARMAN)
	)
	(unit-type-count-total spearman-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: spearman-line)
=>
	(up-train gl-unitescrow-state c: spearman-line)
)

(defrule
	(and
		(goal train-spearman YES)
		(goal tertiary-unit SPEARMAN)
	)
	(unit-type-count-total spearman-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: spearman-line)
=>
	(up-train gl-unitescrow-state c: spearman-line)
)

(defrule
	(and
		(goal train-spearman YES)
		(goal quaternary-unit SPEARMAN)
	)
	(unit-type-count-total spearman-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: spearman-line)
=>
	(up-train gl-unitescrow-state c: spearman-line)
)

(defrule
	(and
		(goal train-spearman YES)
		(goal primary-support-unit SPEARMAN)
	)
	(unit-type-count-total spearman-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: spearman-line)
=>
	(up-train gl-unitescrow-state c: spearman-line)
)

(defrule
	(and
		(goal train-spearman YES)
		(goal secondary-support-unit SPEARMAN)
	)
	(unit-type-count-total spearman-line g:< gl-no-percent)
	(up-can-train gl-unitescrow-state c: spearman-line)
=>
	(up-train gl-unitescrow-state c: spearman-line)
)

;========================SPEARMAN END========================

;========================HORUS BEGIN========================

(defrule
	(and
		(goal train-horus YES)
		(goal primary-unit HORUS)
	)
	(unit-type-count-total horus-scout-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: horus-scout-line)
=>
	(up-train gl-unitescrow-state c: horus-scout-line)
)

(defrule
	(and
		(goal train-horus YES)
		(goal primary-unit HORUS)
	)
	(unit-type-count-total horus-scout-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: horus-scout-line)
=>
	(up-train gl-unitescrow-state c: horus-scout-line)
)

(defrule
	(and
		(goal train-horus YES)
		(goal primary-unit HORUS)
	)
	(unit-type-count-total horus-scout-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: horus-scout-line)
=>
	(up-train gl-unitescrow-state c: horus-scout-line)
)

(defrule
	(and
		(goal train-horus YES)
		(goal primary-unit HORUS)
	)
	(unit-type-count-total horus-scout-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: horus-scout-line)
=>
	(up-train gl-unitescrow-state c: horus-scout-line)
)

;========================HORUS END========================

;========================BARRACKS END========================

;========================ARCHERY RANGE BEGIN========================

;========================ARCHER BEGIN========================

(defrule
	(and
		(goal train-bowman YES)
		(goal primary-unit ARCHER)
	)
	(unit-type-count-total bowman-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: bowman-line)
=>
	(up-train gl-unitescrow-state c: bowman-line)
)

(defrule
	(and
		(goal train-bowman YES)
		(goal secondary-unit ARCHER)
	)
	(unit-type-count-total bowman-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: bowman-line)
=>
	(up-train gl-unitescrow-state c: bowman-line)
)

(defrule
	(and
		(goal train-bowman YES)
		(goal tertiary-unit ARCHER)
	)
	(unit-type-count-total bowman-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: bowman-line)
=>
	(up-train gl-unitescrow-state c: bowman-line)
)

(defrule
	(and
		(goal train-bowman YES)
		(goal quaternary-unit ARCHER)
	)
	(unit-type-count-total bowman-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: bowman-line)
=>
	(up-train gl-unitescrow-state c: bowman-line)
)

;train Crossbowmen if they available

(defrule
	(goal train-crossbow YES)
	(and
		(goal train-bowman YES)
		(goal primary-unit ARCHER)
	)
	(unit-type-count-total crossbowman g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: crossbowman)
=>
	(up-train gl-unitescrow-state c: crossbowman)
)

(defrule
	(goal train-crossbow YES)
	(and
		(goal train-bowman YES)
		(goal secondary-unit ARCHER)
	)
	(unit-type-count-total crossbowman g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: crossbowman)
=>
	(up-train gl-unitescrow-state c: crossbowman)
)

(defrule
	(goal train-crossbow YES)
	(and
		(goal train-bowman YES)
		(goal tertiary-unit ARCHER)
	)
	(unit-type-count-total crossbowman g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: crossbowman)
=>
	(up-train gl-unitescrow-state c: crossbowman)
)

(defrule
	(goal train-crossbow YES)
	(and
		(goal train-bowman YES)
		(goal quaternary-unit ARCHER)
	)
	(unit-type-count-total crossbowman g:< gl-no-percent)
	(up-can-train gl-unitescrow-state c: crossbowman)
=>
	(up-train gl-unitescrow-state c: crossbowman)
)

;========================ARCHER END========================

;========================SKIRMISHER BEGIN========================

#load-if-not-defined INCAN-CIV

(defrule
	(and
		(goal train-skirmisher YES)
		(goal primary-unit SKIRMISHER)
	)
	(unit-type-count-total skirmisher-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: skirmisher-line)
=>
	(up-train gl-unitescrow-state c: skirmisher-line)
)

(defrule
	(and
		(goal train-skirmisher YES)
		(goal secondary-unit SKIRMISHER)
	)
	(unit-type-count-total skirmisher-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: skirmisher-line)
=>
	(up-train gl-unitescrow-state c: skirmisher-line)
)

(defrule
	(and
		(goal train-skirmisher YES)
		(goal tertiary-unit SKIRMISHER)
	)
	(unit-type-count-total skirmisher-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: skirmisher-line)
=>
	(up-train gl-unitescrow-state c: skirmisher-line)
)

(defrule
	(and
		(goal train-skirmisher YES)
		(goal quaternary-unit SKIRMISHER)
	)
	(unit-type-count-total skirmisher-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: skirmisher-line)
=>
	(up-train gl-unitescrow-state c: skirmisher-line)
)

#end-if

#load-if-defined INCAN-CIV

(defrule
	(and
		(goal train-skirmisher YES)
		(goal primary-unit SKIRMISHER)
	)
	(unit-type-count-total range-mounted-skirmisher-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: range-mounted-skirmisher-line)
=>
	(up-train gl-unitescrow-state c: range-mounted-skirmisher-line)
)

(defrule
	(and
		(goal train-skirmisher YES)
		(goal secondary-unit SKIRMISHER)
	)
	(unit-type-count-total range-mounted-skirmisher-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: range-mounted-skirmisher-line)
=>
	(up-train gl-unitescrow-state c: range-mounted-skirmisher-line)
)

(defrule
	(and
		(goal train-skirmisher YES)
		(goal tertiary-unit SKIRMISHER)
	)
	(unit-type-count-total range-mounted-skirmisher-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: range-mounted-skirmisher-line)
=>
	(up-train gl-unitescrow-state c: range-mounted-skirmisher-line)
)

(defrule
	(and
		(goal train-skirmisher YES)
		(goal quaternary-unit SKIRMISHER)
	)
	(unit-type-count-total range-mounted-skirmisher-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: range-mounted-skirmisher-line)
=>
	(up-train gl-unitescrow-state c: range-mounted-skirmisher-line)
)

#end-if

;========================SKIRMISHER END========================

;========================CAVALRY ARCHER BEGIN========================

(defrule
	(and
		(goal train-cavarcher YES)
		(goal primary-unit CAVARCHER)
	)
	(unit-type-count-total cavalry-archer-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: cavalry-archer-line)
=>
	(up-train gl-unitescrow-state c: cavalry-archer-line)
)

(defrule
	(and
		(goal train-cavarcher YES)
		(goal secondary-unit CAVARCHER)
	)
	(unit-type-count-total cavalry-archer-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: cavalry-archer-line)
=>
	(up-train gl-unitescrow-state c: cavalry-archer-line)
)

(defrule
	(and
		(goal train-cavarcher YES)
		(goal tertiary-unit CAVARCHER)
	)
	(unit-type-count-total cavalry-archer-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: cavalry-archer-line)
=>
	(up-train gl-unitescrow-state c: cavalry-archer-line)
)

(defrule
	(and
		(goal train-cavarcher YES)
		(goal quaternary-unit CAVARCHER)
	)
	(unit-type-count-total cavalry-archer-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: cavalry-archer-line)
=>
	(up-train gl-unitescrow-state c: cavalry-archer-line)
)

;========================CAVALRY ARCHER END========================

;========================CAMEL ARCHER BEGIN========================

(defrule
	(and
		(goal train-cmlarcher YES)
		(goal primary-unit CMLARCHER)
	)
	(unit-type-count-total camel-archer-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: camel-archer-line)
=>
	(up-train gl-unitescrow-state c: camel-archer-line)
)

(defrule
	(and
		(goal train-cmlarcher YES)
		(goal secondary-unit CMLARCHER)
	)
	(unit-type-count-total camel-archer-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: camel-archer-line)
=>
	(up-train gl-unitescrow-state c: cavalry-archer-line)
)

(defrule
	(and
		(goal train-cmlarcher YES)
		(goal tertiary-unit CMLARCHER)
	)
	(unit-type-count-total camel-archer-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: camel-archer-line)
=>
	(up-train gl-unitescrow-state c: camel-archer-line)
)

(defrule
	(and
		(goal train-cmlarcher YES)
		(goal quaternary-unit CMLARCHER)
	)
	(unit-type-count-total camel-archer-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: camel-archer-line)
=>
	(up-train gl-unitescrow-state c: camel-archer-line)
)

(defrule
	(and
		(goal train-cmlarcher YES)
		(goal primary-support-unit CMLARCHER)
	)
	(unit-type-count-total camel-archer-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: camel-archer-line)
=>
	(up-train gl-unitescrow-state c: camel-archer-line)
)

(defrule
	(and
		(goal train-cmlarcher YES)
		(goal secondary-support-unit CMLARCHER)
	)
	(unit-type-count-total camel-archer-line g:< gl-no-percent)
	(up-can-train gl-unitescrow-state c: camel-archer-line)
=>
	(up-train gl-unitescrow-state c: camel-archer-line)
)

;========================CAMEL ARCHER END========================

;========================ELEPHANT ARCHER BEGIN========================

(defrule
	(and
		(goal train-elearcher YES)
		(goal primary-unit ELEARCHER)
	)
	(unit-type-count-total elephant-archer-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: elephant-archer-line)
=>
	(up-train gl-unitescrow-state c: elephant-archer-line)
)

(defrule
	(and
		(goal train-elearcher YES)
		(goal primary-unit ELEARCHER)
	)
	(unit-type-count-total elephant-archer-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: elephant-archer-line)
=>
	(up-train gl-unitescrow-state c: elephant-archer-line)
)

(defrule
	(and
		(goal train-elearcher YES)
		(goal primary-unit ELEARCHER)
	)
	(unit-type-count-total elephant-archer-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: elephant-archer-line)
=>
	(up-train gl-unitescrow-state c: elephant-archer-line)
)

(defrule
	(and
		(goal train-elearcher YES)
		(goal primary-unit ELEARCHER)
	)
	(unit-type-count-total elephant-archer-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: elephant-archer-line)
=>
	(up-train gl-unitescrow-state c: elephant-archer-line)
)

;========================ELEPHANT ARCHER END========================

;========================CHARIOT ARCHER BEGIN========================

(defrule
	(and
		(goal train-chrarcher YES)
		(goal primary-unit CHRARCHER)
	)
	(unit-type-count-total chariot-archer g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: chariot-archer)
=>
	(up-train gl-unitescrow-state c: chariot-archer)
)

(defrule
	(and
		(goal train-chrarcher YES)
		(goal primary-unit CHRARCHER)
	)
	(unit-type-count-total chariot-archer g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: chariot-archer)
=>
	(up-train gl-unitescrow-state c: chariot-archer)
)

(defrule
	(and
		(goal train-chrarcher YES)
		(goal primary-unit CHRARCHER)
	)
	(unit-type-count-total chariot-archer g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: chariot-archer)
=>
	(up-train gl-unitescrow-state c: chariot-archer)
)

(defrule
	(and
		(goal train-chrarcher YES)
		(goal primary-unit CHRARCHER)
	)
	(unit-type-count-total chariot-archer g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: chariot-archer)
=>
	(up-train gl-unitescrow-state c: chariot-archer)
)

;========================CHARIOT ARCHER END========================

;========================ARCHERY RANGE END========================

;========================STABLE BEGIN========================

;========================SCOUT CAVALRY BEGIN========================

(defrule
	(and
		(goal train-scoutcav YES)
		(goal primary-unit SCAVALRY)
	)
	(unit-type-count-total scout-cavalry-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: scout-cavalry-line)
=>
	(up-train gl-unitescrow-state c: scout-cavalry-line)
)

(defrule
	(and
		(goal train-scoutcav YES)
		(goal primary-unit SCAVALRY)
	)
	(unit-type-count-total scout-cavalry-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: scout-cavalry-line)
=>
	(up-train gl-unitescrow-state c: scout-cavalry-line)
)

(defrule
	(and
		(goal train-scoutcav YES)
		(goal primary-unit SCAVALRY)
	)
	(unit-type-count-total scout-cavalry-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: scout-cavalry-line)
=>
	(up-train gl-unitescrow-state c: scout-cavalry-line)
)

(defrule
	(and
		(goal train-scoutcav YES)
		(goal primary-unit SCAVALRY)
	)
	(unit-type-count-total scout-cavalry-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: scout-cavalry-line)
=>
	(up-train gl-unitescrow-state c: scout-cavalry-line)
)

(defrule
	(and
		(goal train-scoutcav YES)
		(goal primary-support-unit SCAVALRY)
	)
	(unit-type-count-total scout-cavalry-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: scout-cavalry-line)
=>
	(up-train gl-unitescrow-state c: scout-cavalry-line)
)

(defrule
	(and
		(goal train-scoutcav YES)
		(goal secondary-support-unit SCAVALRY)
	)
	(unit-type-count-total scout-cavalry-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: scout-cavalry-line)
=>
	(up-train gl-unitescrow-state c: scout-cavalry-line)
)

;========================SCOUT CAVALRY END========================

#load-if-not-defined BENGALIS-CIV
#load-if-not-defined DRAVIDIANS-CIV

;========================CAVALRY BEGIN========================

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-cavalry YES)
		(goal primary-unit CAVALRY)
	)
	(unit-type-count-total cavalry-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: cavalry-line)
=>
	(up-train gl-unitescrow-state c: cavalry-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-cavalry YES)
		(goal secondary-unit CAVALRY)
	)
	(unit-type-count-total cavalry-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: cavalry-line)
=>
	(up-train gl-unitescrow-state c: cavalry-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-cavalry YES)
		(goal tertiary-unit CAVALRY)
	)
	(unit-type-count-total cavalry-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: cavalry-line)
=>
	(up-train gl-unitescrow-state c: cavalry-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-cavalry YES)
		(goal quaternary-unit CAVALRY)
	)
	(unit-type-count-total cavalry-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: cavalry-line)
=>
	(up-train gl-unitescrow-state c: cavalry-line)
)

;========================CAVALRY END========================

#end-if
#end-if

;========================RATHA BEGIN========================

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-ratha YES)
		(goal primary-unit RATHA)
	)
	(unit-type-count-total ratha-melee-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: ratha-melee-line)
=>
	(up-train gl-unitescrow-state c: ratha-melee-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-ratha YES)
		(goal secondary-unit RATHA)
	)
	(unit-type-count-total ratha-melee-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: ratha-melee-line)
=>
	(up-train gl-unitescrow-state c: ratha-melee-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-ratha YES)
		(goal tertiary-unit RATHA)
	)
	(unit-type-count-total ratha-melee-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: ratha-melee-line)
=>
	(up-train gl-unitescrow-state c: ratha-melee-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-ratha YES)
		(goal quaternary-unit RATHA)
	)
	(unit-type-count-total ratha-melee-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: ratha-melee-line)
=>
	(up-train gl-unitescrow-state c: ratha-melee-line)
)

;========================RATHA END========================

;========================CAMEL RIDER BEGIN========================

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-camel YES)
		(goal primary-unit CAMEL)
	)
	(unit-type-count-total camel-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: camel-line)
=>
	(up-train gl-unitescrow-state c: camel-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-camel YES)
		(goal secondary-unit CAMEL)
	)
	(unit-type-count-total camel-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: camel-line)
=>
	(up-train gl-unitescrow-state c: camel-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-camel YES)
		(goal tertiary-unit CAMEL)
	)
	(unit-type-count-total camel-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: camel-line)
=>
	(up-train gl-unitescrow-state c: camel-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-camel YES)
		(goal quaternary-unit CAMEL)
	)
	(unit-type-count-total camel-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: camel-line)
=>
	(up-train gl-unitescrow-state c: camel-line)
)

;========================CAMEL RIDER END========================

;========================BATTLE ELEPHANT BEGIN========================

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-elephant YES)
		(goal primary-unit ELEPHANT)
	)
	(unit-type-count-total battle-elephant-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: battle-elephant-line)
=>
	(up-train gl-unitescrow-state c: battle-elephant-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-elephant YES)
		(goal secondary-unit ELEPHANT)
	)
	(unit-type-count-total battle-elephant-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: battle-elephant-line)
=>
	(up-train gl-unitescrow-state c: battle-elephant-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-elephant YES)
		(goal tertiary-unit ELEPHANT)
	)
	(unit-type-count-total battle-elephant-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: battle-elephant-line)
=>
	(up-train gl-unitescrow-state c: battle-elephant-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-elephant YES)
		(goal quaternary-unit ELEPHANT)
	)
	(unit-type-count-total battle-elephant-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: battle-elephant-line)
=>
	(up-train gl-unitescrow-state c: battle-elephant-line)
)

;========================BATTLE ELEPHANT END========================

;========================CHARIOT BEGIN========================

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-chariot YES)
		(goal primary-unit CHARIOT)
	)
	(unit-type-count-total chariot-line g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: chariot-line)
=>
	(up-train gl-unitescrow-state c: chariot-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-chariot YES)
		(goal secondary-unit CHARIOT)
	)
	(unit-type-count-total chariot-line g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: chariot-line)
=>
	(up-train gl-unitescrow-state c: chariot-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-chariot YES)
		(goal tertiary-unit CHARIOT)
	)
	(unit-type-count-total chariot-line g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: chariot-line)
=>
	(up-train gl-unitescrow-state c: chariot-line)
)

(defrule
	(up-compare-goal current-phase >= 4)
	(and
		(goal train-chariot YES)
		(goal quaternary-unit CHARIOT)
	)
	(unit-type-count-total chariot-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: chariot-line)
=>
	(up-train gl-unitescrow-state c: chariot-line)
)

;========================CHARIOT END========================

;========================STABLE END========================

;========================SIEGE WORKSHOP BEGIN========================

;========================RAM BEGIN========================

(defrule
	(up-compare-goal current-phase >= 4)
	(goal train-ram YES)
	(unit-type-count-total battering-ram-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: battering-ram-line)
=>
	(up-train gl-unitescrow-state c: battering-ram-line)
)

;========================RAM END========================

;========================ARMORED ELEPHANT BEGIN========================

(defrule
	(up-compare-goal current-phase >= 4)
	(goal train-ram YES)
	(unit-type-count-total armored-elephant-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: armored-elephant-line)
=>
	(up-train gl-unitescrow-state c: armored-elephant-line)
)

;========================ARMORED ELEPHANT END========================

;========================SCORPION BEGIN========================

(defrule
	(up-compare-goal current-phase >= 4)
	(goal train-scorpion YES)
	(unit-type-count-total scorpion-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: scorpion-line)
=>
	(up-train gl-unitescrow-state c: scorpion-line)
)

;========================SCORPION END========================

;========================CATAPULT BEGIN========================

(defrule
	(up-compare-goal current-phase >= 4)
	(goal train-catapult YES)
	(unit-type-count-total catapult g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: catapult)
=>
	(up-train gl-unitescrow-state c: catapult)
)

;========================CATAPULT END========================

;========================SIEGE TOWER BEGIN========================

;(defrule
;	(up-compare-goal current-phase >= 4)
;	(unit-type-count-total siege-tower g:< gl-no-percent)
;	(up-can-train gl-unitescrow-state c: siege-tower)
;=>
;	(up-train gl-unitescrow-state c: siege-tower)
;)

;========================SIEGE TOWER END========================

;========================SIEGE WORKSHOP END========================

;========================TEMPLE BEGIN========================

;========================PRIEST BEGIN========================

;train a lone priest for relics
(defrule
	(unit-type-count-total priest c:< 1)
	(up-can-train gl-unitescrow-state c: priest)
=>
	(up-train gl-unitescrow-state c: priest)
)

(defrule
	(goal train-priest YES)
	(unit-type-count-total priest g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: priest)
=>
	(up-train gl-unitescrow-state c: priest)
)

(defrule
	(and
		(goal train-priest YES)
		(goal primary-unit PRIEST)
	)
	(unit-type-count-total priest g:< gl-ten-percent)
	(up-can-train gl-unitescrow-state c: priest)
=>
	(up-train gl-unitescrow-state c: priest)
)

(defrule
	(and
		(goal train-priest YES)
		(goal secondary-unit PRIEST)
	)
	(unit-type-count-total priest g:< gl-five-percent)
	(up-can-train gl-unitescrow-state c: priest)
=>
	(up-train gl-unitescrow-state c: priest)
)

(defrule
	(and
		(goal train-priest YES)
		(goal tertiary-unit PRIEST)
	)
	(unit-type-count-total priest g:< gl-two-percent)
	(up-can-train gl-unitescrow-state c: priest)
=>
	(up-train gl-unitescrow-state c: priest)
)

(defrule
	(and
		(goal train-priest YES)
		(goal quaternary-unit PRIEST)
	)
	(unit-type-count-total priest g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: priest)
=>
	(up-train gl-unitescrow-state c: priest)
)

;========================PRIEST END========================

;========================BRAHMIN BEGIN========================

(defrule
	(up-compare-goal current-phase >= 5)
	(goal train-priest YES)
	(unit-type-count-total brahmin g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: brahmin)
=>
	(up-train gl-unitescrow-state c: brahmin)
)

;========================BRAHMIN END========================

;========================TEMPLE END========================

;========================SHIPYARD BEGIN========================

;========================SCOUT SHIP BEGIN========================

(defrule
	(goal ship-train SCOUTSHIP)
	(goal train-scoutships YES)
	(unit-type-count-total scout-galley-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: scout-galley-line)
=>
	(up-train gl-unitescrow-state c: scout-galley-line)
)

;========================SCOUT SHIP END========================

;========================POLYREME BEGIN========================

(defrule
	(and
		(up-compare-goal current-phase >= 2)
		(goal ship-train POLYREME)
	)
	(goal train-remes YES)
	(or
		(goal map-type LAKE)
		(or
			(goal map-type RIVERS)
			(or
				(goal map-type ISLANDS)
				(goal map-type TEAM-ISLANDS)
			)
		)
	)
	(unit-type-count-total polyreme-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: polyreme-line)
=>
	(up-train gl-unitescrow-state c: polyreme-line)
)

;========================POLYREME END========================

;========================FIRE SHIP BEGIN========================

(defrule
	(and
		(up-compare-goal current-phase >= 2)
		(goal ship-train FIRESHIP)
	)
	(goal train-fireships YES)
	(or
		(goal map-type LAKE)
		(or
			(goal map-type RIVERS)
			(or
				(goal map-type ISLANDS)
				(goal map-type TEAM-ISLANDS)
			)
		)
	)
	(unit-type-count-total fire-ship-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: fire-ship-line)
=>
	(up-train gl-unitescrow-state c: fire-ship-line)
)

;========================FIRE SHIP END========================

;========================DEMOLITION SHIP BEGIN========================

(defrule
	(and
		(up-compare-goal current-phase >= 2)
		(goal ship-train DEMOSHIP)
	)
	(goal train-demoships YES)
	(or
		(goal map-type LAKE)
		(or
			(goal map-type RIVERS)
			(or
				(goal map-type ISLANDS)
				(goal map-type TEAM-ISLANDS)
			)
		)
	)
	(unit-type-count-total demolition-ship-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: demolition-ship-line)
=>
	(up-train gl-unitescrow-state c: demolition-ship-line)
)

;========================DEMOLITION SHIP END========================

;========================HEMIOLIA BEGIN========================

(defrule
	(and
		(up-compare-goal current-phase >= 2)
		(goal ship-train HEMIOLIA)
	)
	(goal train-hemiolia YES)
	(or
		(goal map-type LAKE)
		(or
			(goal map-type RIVERS)
			(or
				(goal map-type ISLANDS)
				(goal map-type TEAM-ISLANDS)
			)
		)
	)
	(unit-type-count-total hemiolia-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: hemiolia-line)
=>
	(up-train gl-unitescrow-state c: hemiolia-line)
)

;========================HEMIOLIA END========================

;========================BOARDING SHIP BEGIN========================

(defrule
	(and
		(up-compare-goal current-phase >= 4)
		(goal ship-train BOARDINGSHIP)
	)
	(goal train-boardingships YES)
	(or
		(goal map-type LAKE)
		(or
			(goal map-type RIVERS)
			(or
				(goal map-type ISLANDS)
				(goal map-type TEAM-ISLANDS)
			)
		)
	)
	(unit-type-count-total boarding-ship g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: boarding-ship)
=>
	(up-train gl-unitescrow-state c: boarding-ship)
)

;========================BOARDING SHIP END========================

;========================Q-REME BEGIN========================

(defrule
	(and
		(up-compare-goal current-phase >= 4)
		(goal ship-train Q-REME)
	)
	(or
		(goal map-type LAKE)
		(or
			(goal map-type RIVERS)
			(or
				(goal map-type ISLANDS)
				(goal map-type TEAM-ISLANDS)
			)
		)
	)
	(unit-type-count-total quadrireme-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: quadrireme-line)
=>
	(up-train gl-unitescrow-state c: quadrireme-line)
)

;========================Q-REME END========================

;========================OCTERES BEGIN========================

(defrule
	(and
		(up-compare-goal current-phase >= 4)
		(goal ship-train OCTERES)
	)
	(or
		(goal map-type LAKE)
		(or
			(goal map-type RIVERS)
			(or
				(goal map-type ISLANDS)
				(goal map-type TEAM-ISLANDS)
			)
		)
	)
	(unit-type-count-total octeres g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: octeres)
=>
	(up-train gl-unitescrow-state c: octeres)
)

;========================OCTERES END========================

;========================JUGGERNAUT BEGIN========================

(defrule
	(and
		(up-compare-goal current-phase >= 4)
		(goal ship-train JUGGERNAUT)
	)
	(or
		(goal map-type LAKE)
		(or
			(goal map-type RIVERS)
			(or
				(goal map-type ISLANDS)
				(goal map-type TEAM-ISLANDS)
			)
		)
	)
	(unit-type-count-total juggernaut-line g:< gl-one-percent)
	(up-can-train gl-unitescrow-state c: juggernaut-line)
=>
	(up-train gl-unitescrow-state c: juggernaut-line)
)

;========================JUGGERNAUT END========================

;========================SHIPYARD END========================