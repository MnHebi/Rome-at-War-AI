
(defrule
	(true)
=>
	(set-strategic-number sn-dock-avoidance-factor -10000)
	(set-strategic-number sn-dock-proximity-factor 1000)
	(set-strategic-number sn-dock-placement-mode -1)
	(set-strategic-number sn-dock-training-filter 2)
	(set-strategic-number sn-minimum-dropsite-buffer 50)
	(set-strategic-number sn-mule-cart-dropsite-placement mining-camp)
	(set-strategic-number sn-do-not-scale-for-difficulty-level 1)

	(disable-self)
)

(defrule
	(up-timer-status sn-timer != timer-running)
=>
	(enable-timer sn-timer 15)
)

(defrule
	(up-timer-status sn-timer == timer-triggered)
=>
	(up-modify-sn sn-safe-town-size g:= safe-townsize)
	(up-modify-sn sn-minimum-town-size g:= inner-townsize)
)

(defrule
		(current-age == dark-age)
=>
		(set-strategic-number sn-preferred-mill-placement 0)
		(disable-self)
)

(defrule
		(current-age == feudal-age)
=>
		(set-strategic-number sn-preferred-mill-placement 1)
		(disable-self)
)

(defrule
		(current-age == castle-age)
=>
		(set-strategic-number sn-preferred-mill-placement 1)
		(disable-self)
)

(defrule
		(current-age == imperial-age)
=>
		(set-strategic-number sn-preferred-mill-placement 1)
		(disable-self)
)

#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined DIFFICULTY-EXTREME

(defrule
	(true)
=>
	(set-strategic-number sn-consecutive-idle-unit-limit 10)
	
	(disable-self)
)

#end-if
#end-if
#end-if
#end-if

#load-if-defined DIFFICULTY-MODERATE

(defrule
	(true)
=>
	(set-strategic-number sn-consecutive-idle-unit-limit 0)
	
	(disable-self)
)

#end-if

#load-if-defined DIFFICULTY-HARD

(defrule
	(true)
=>
	(set-strategic-number sn-consecutive-idle-unit-limit 0)
	
	(disable-self)
)

#end-if

#load-if-defined DIFFICULTY-HARDEST

(defrule
	(true)
=>
	(set-strategic-number sn-consecutive-idle-unit-limit 0)
	
	(disable-self)
)

#end-if

#load-if-defined DIFFICULTY-EXTREME

(defrule
	(true)
=>
	(set-strategic-number sn-consecutive-idle-unit-limit 0)
	
	(disable-self)
)

#end-if

(defrule
	(goal attack-type-land TOWN-SIZE)
=>
	(up-modify-sn sn-minimum-attack-group-size c:= 0)
	(up-modify-sn sn-maximum-attack-group-size c:= 0)
	(up-modify-sn sn-number-attack-groups c:= 0)
)

(defrule
	(goal attack-type-land GROUP)
=>
	(up-modify-sn sn-minimum-attack-group-size g:= gl-pop-atkgrp-minsize)
	(up-modify-sn sn-maximum-attack-group-size g:= gl-pop-atkgrp-maxsize)
	(up-modify-sn sn-number-attack-groups g:= gl-pop-number-groups)
)

(defrule
	(goal attack-type-sea TOWN-SIZE)
=>
	(up-modify-sn sn-minimum-boat-attack-group-size c:= 0)
	(up-modify-sn sn-maximum-boat-attack-group-size c:= 0)
	(up-modify-sn sn-number-boat-attack-groups c:= 0)
)

(defrule
	(goal attack-type-sea GROUP)
=>
	(up-modify-sn sn-minimum-boat-attack-group-size g:= gl-pop-atkgrp-minsize)
	(up-modify-sn sn-maximum-boat-attack-group-size g:= gl-pop-atkgrp-maxsize)
	(up-modify-sn sn-number-boat-attack-groups g:= gl-pop-number-groups)
)


